
syntax = "proto3";

package ga4gh_task_ref;

import "task_execution.proto";

message Resources {
  uint32 cpus = 1;
  // In GB
  double ram = 2;
  // In GB
  double disk = 3;
}

enum WorkerState {
  Unknown = 0;
  Alive = 1;
  Dead = 2;
  Gone = 3;
}

message Worker {
  string id = 1;
  // TODO maybe map<> type in the protobuf schema is bad style.
  //      could easily convert to a map in the Go code.
  map<string,bool> active = 2;
  map<string,bool> assigned = 4;
  Resources resources = 5;
  Resources available = 6;
  int64 last_ping = 7;
  WorkerState state = 8;
  bool preemptible = 9;
  repeated int32 active_ports = 10;
  string zone = 11;
}

message Assignment {
  ga4gh_task_exec.Job job = 1;
  string auth = 2;
}

message UpdateWorkerRequest {
  // ID of the worker
  string id = 1;
  // Description of CPU, RAM, etc.
  Resources resources = 2;
  // Hostname of the worker host.
  string hostname  = 3;
  // States of all jobs in the worker: job ID -> State
  map<string, ga4gh_task_exec.State> states = 4;
}

message UpdateWorkerResponse {
  // New jobs which have been assigned to this worker.
  repeated Assignment assigned = 3;
  // IDs of jobs assigned to this worker that were canceled.
  repeated string canceled = 4;
}

message WorkerGoneRequest {
  // ID of the worker
  string id = 1;
}

message WorkerGoneResponse {}

message UpdateJobLogsRequest {
  string id = 1;
  int64 step = 2;
  ga4gh_task_exec.JobLog log = 4;
  string worker_id = 5;
}
message UpdateJobLogsResponse {}

message QueuedTaskInfoRequest {
  int32 max_tasks = 1;
}

message QueuedTaskInfo {
  repeated string inputs = 1;
  ga4gh_task_exec.Resources resources = 2;
}

message GetWorkersRequest {
}

message GetWorkersResponse {
  repeated Worker workers = 1;
}

/**
 * Scheduler Service
 */
service Scheduler {
  rpc GetQueueInfo(QueuedTaskInfoRequest) returns(stream QueuedTaskInfo) {};
  rpc UpdateJobLogs(UpdateJobLogsRequest) returns (UpdateJobLogsResponse) {};
  rpc UpdateWorker(UpdateWorkerRequest) returns (UpdateWorkerResponse) {};
  rpc GetWorkers(GetWorkersRequest) returns (GetWorkersResponse) {};
  rpc WorkerGone(WorkerGoneRequest) returns (WorkerGoneResponse) {};
}
