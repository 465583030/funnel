// Code generated by protoc-gen-go.
// source: tes.proto
// DO NOT EDIT!

/*
Package tes is a generated protocol buffer package.

It is generated from these files:
	tes.proto

It has these top-level messages:
	TaskParameter
	Ports
	DockerExecutor
	Volume
	Resources
	Task
	JobListRequest
	TaskDesc
	JobDesc
	JobListResponse
	JobID
	JobLog
	Job
	ServiceInfoRequest
	ServiceInfo
*/
package tes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_Unknown      State = 0
	State_Queued       State = 1
	State_Running      State = 2
	State_Paused       State = 3
	State_Complete     State = 4
	State_Error        State = 5
	State_SystemError  State = 6
	State_Canceled     State = 7
	State_Initializing State = 8
)

var State_name = map[int32]string{
	0: "Unknown",
	1: "Queued",
	2: "Running",
	3: "Paused",
	4: "Complete",
	5: "Error",
	6: "SystemError",
	7: "Canceled",
	8: "Initializing",
}
var State_value = map[string]int32{
	"Unknown":      0,
	"Queued":       1,
	"Running":      2,
	"Paused":       3,
	"Complete":     4,
	"Error":        5,
	"SystemError":  6,
	"Canceled":     7,
	"Initializing": 8,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Parameters for Task
type TaskParameter struct {
	// OPTIONAL
	// name of the parameter
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	// Text description
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// REQUIRED
	// location in long term storage, is a url specific to the implementing
	// system. For example s3://my-object-store/file1 or gs://my-bucket/file2 or
	// file:///path/to/my/file
	Location string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// REQUIRED
	// path in the machine file system. Note, this MUST be a path that exists
	// within one of the defined volumes
	// If the file is mounted in a volume that is mounted read/write the file must
	// be accessable to processes in the container. Optimizations, suc as hard linking
	// to a source file, or providing a streaming input from a FUSE mount should only
	// be done if the volume is mounted as read only
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	// Type of data, "File" or "Directory"
	// if used for an output all the files in the directory
	// will be copied to the storage location
	Class string `protobuf:"bytes,5,opt,name=class" json:"class,omitempty"`
	// OPTIONAL: default false
	// if the parameter is an output, should the element be created before executing
	// the command. For example if saving the working directory as an output,
	// the directory needs to exist before the command is called. If false, it is
	// assumed that the user will create the element as a part of the operation
	Create bool `protobuf:"varint,6,opt,name=create" json:"create,omitempty"`
}

func (m *TaskParameter) Reset()                    { *m = TaskParameter{} }
func (m *TaskParameter) String() string            { return proto.CompactTextString(m) }
func (*TaskParameter) ProtoMessage()               {}
func (*TaskParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TaskParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskParameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TaskParameter) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *TaskParameter) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TaskParameter) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *TaskParameter) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

// host to container port mappings
type Ports struct {
	// REQUIRED
	// Exposed port on container
	Container int32 `protobuf:"varint,1,opt,name=container" json:"container,omitempty"`
	// OPTIONAL
	// Must be greater than 1024;
	// Defaults to 0
	Host int32 `protobuf:"varint,2,opt,name=host" json:"host,omitempty"`
}

func (m *Ports) Reset()                    { *m = Ports{} }
func (m *Ports) String() string            { return proto.CompactTextString(m) }
func (*Ports) ProtoMessage()               {}
func (*Ports) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ports) GetContainer() int32 {
	if m != nil {
		return m.Container
	}
	return 0
}

func (m *Ports) GetHost() int32 {
	if m != nil {
		return m.Host
	}
	return 0
}

// A command line to be executed and the docker container to run it
type DockerExecutor struct {
	// REQUIRED
	// Docker Image name
	ImageName string `protobuf:"bytes,1,opt,name=imageName" json:"imageName,omitempty"`
	// REQUIRED
	// The command to be executed
	Cmd []string `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
	// OPTIONAL: default docker image directory
	// The working directory that the command will be executed in
	Workdir string `protobuf:"bytes,3,opt,name=workdir" json:"workdir,omitempty"`
	// OPTIONAL
	// Path for supplying input to stdin, blank if none
	Stdin string `protobuf:"bytes,6,opt,name=stdin" json:"stdin,omitempty"`
	// OPTIONAL
	// Path for stdout recording, blank if not storing to file
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// OPTIONAL
	// Path for stderr recording, blank if not storing to file
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// OPTIONAL
	// Port to expose from within the container, blank if none
	Ports []*Ports `protobuf:"bytes,7,rep,name=ports" json:"ports,omitempty"`
}

func (m *DockerExecutor) Reset()                    { *m = DockerExecutor{} }
func (m *DockerExecutor) String() string            { return proto.CompactTextString(m) }
func (*DockerExecutor) ProtoMessage()               {}
func (*DockerExecutor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DockerExecutor) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *DockerExecutor) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *DockerExecutor) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *DockerExecutor) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

func (m *DockerExecutor) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *DockerExecutor) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *DockerExecutor) GetPorts() []*Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

// Attached volume request.
type Volume struct {
	// OPTIONAL
	// Name of attached volume
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// REQUIRED
	// Minimum size
	SizeGb float64 `protobuf:"fixed64,2,opt,name=sizeGb" json:"sizeGb,omitempty"`
	// OPTIONAL
	// Source volume, this would refer to an existing volume the execution engine
	// could identify. Leave blank if is to be a newly created volume
	// Volumes loaded from a source will be mounted as read only
	Source string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// REQUIRED
	// mount point for volume inside the docker container
	MountPoint string `protobuf:"bytes,6,opt,name=mountPoint" json:"mountPoint,omitempty"`
	// OPTIONAL default False
	Readonly bool `protobuf:"varint,7,opt,name=readonly" json:"readonly,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetSizeGb() float64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *Volume) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Volume) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *Volume) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

type Resources struct {
	// OPTIONAL default 1
	// Minimum number of CPUs
	MinimumCpuCores uint32 `protobuf:"varint,1,opt,name=minimumCpuCores" json:"minimumCpuCores,omitempty"`
	// Can schedule on resource that resource that can be preempted, like AWS Spot Instances
	// OPTIONAL default false
	Preemptible bool `protobuf:"varint,2,opt,name=preemptible" json:"preemptible,omitempty"`
	// REQUIRED
	// Minimum RAM required
	MinimumRamGb float64 `protobuf:"fixed64,3,opt,name=minimumRamGb" json:"minimumRamGb,omitempty"`
	// REQUIRED
	// Volumes to be mounted into the docker container
	Volumes []*Volume `protobuf:"bytes,4,rep,name=volumes" json:"volumes,omitempty"`
	// OPTIONAL
	// optional scheduling information for systems where multiple compute zones are avalible
	Zones []string `protobuf:"bytes,5,rep,name=zones" json:"zones,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Resources) GetMinimumCpuCores() uint32 {
	if m != nil {
		return m.MinimumCpuCores
	}
	return 0
}

func (m *Resources) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Resources) GetMinimumRamGb() float64 {
	if m != nil {
		return m.MinimumRamGb
	}
	return 0
}

func (m *Resources) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Resources) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

// The description of a task to be run
type Task struct {
	// OPTIONAL
	// user name for task
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	// parameter for execution engine to define/store group information
	ProjectID string `protobuf:"bytes,2,opt,name=projectID" json:"projectID,omitempty"`
	// OPTIONAL
	// free text description of task
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// REQUIRED
	// Files to be copied into system before tasks
	Inputs []*TaskParameter `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	// REQUIRED
	// Files to be copied out of the system after tasks
	Outputs []*TaskParameter `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	// REQUIRED
	// Define required system resources to run job
	Resources *Resources `protobuf:"bytes,6,opt,name=resources" json:"resources,omitempty"`
	// REQUIRED
	// An array of docker executions that will be run sequentially
	Docker []*DockerExecutor `protobuf:"bytes,8,rep,name=docker" json:"docker,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetInputs() []*TaskParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Task) GetOutputs() []*TaskParameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Task) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Task) GetDocker() []*DockerExecutor {
	if m != nil {
		return m.Docker
	}
	return nil
}

// Request listing of jobs tracked by server
type JobListRequest struct {
	// OPTIONAL
	// The name of the project to search for pipelines. Caller must have READ access to this project.
	ProjectID string `protobuf:"bytes,1,opt,name=projectID" json:"projectID,omitempty"`
	// OPTIONAL
	// Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to pageSize, will be returned.
	NamePrefix string `protobuf:"bytes,2,opt,name=namePrefix" json:"namePrefix,omitempty"`
	// OPTIONAL
	// Number of pipelines to return at once. Defaults to 256, and max is 2048.
	PageSize uint32 `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"`
	// OPTIONAL
	// Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
	PageToken string `protobuf:"bytes,4,opt,name=pageToken" json:"pageToken,omitempty"`
}

func (m *JobListRequest) Reset()                    { *m = JobListRequest{} }
func (m *JobListRequest) String() string            { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()               {}
func (*JobListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JobListRequest) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *JobListRequest) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *JobListRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *JobListRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Small description of tasks, returned by server during listing
type TaskDesc struct {
	// OPTIONAL
	// user name for task
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	// parameter for execution engine to define/store group information
	ProjectID string `protobuf:"bytes,2,opt,name=projectID" json:"projectID,omitempty"`
	// OPTIONAL
	// free text description of task
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *TaskDesc) Reset()                    { *m = TaskDesc{} }
func (m *TaskDesc) String() string            { return proto.CompactTextString(m) }
func (*TaskDesc) ProtoMessage()               {}
func (*TaskDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TaskDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskDesc) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *TaskDesc) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Small description of jobs, returned by server during listing
type JobDesc struct {
	// REQUIRED
	JobID string `protobuf:"bytes,1,opt,name=jobID" json:"jobID,omitempty"`
	// REQUIRED
	State State `protobuf:"varint,2,opt,name=state,enum=tes.State" json:"state,omitempty"`
	// REQUIRED short description of task
	Task *TaskDesc `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
}

func (m *JobDesc) Reset()                    { *m = JobDesc{} }
func (m *JobDesc) String() string            { return proto.CompactTextString(m) }
func (*JobDesc) ProtoMessage()               {}
func (*JobDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *JobDesc) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *JobDesc) GetState() State {
	if m != nil {
		return m.State
	}
	return State_Unknown
}

func (m *JobDesc) GetTask() *TaskDesc {
	if m != nil {
		return m.Task
	}
	return nil
}

// Return envelope
type JobListResponse struct {
	Jobs          []*JobDesc `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=nextPageToken" json:"nextPageToken,omitempty"`
}

func (m *JobListResponse) Reset()                    { *m = JobListResponse{} }
func (m *JobListResponse) String() string            { return proto.CompactTextString(m) }
func (*JobListResponse) ProtoMessage()               {}
func (*JobListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *JobListResponse) GetJobs() []*JobDesc {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *JobListResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// ID of an instance of a Task
type JobID struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *JobID) Reset()                    { *m = JobID{} }
func (m *JobID) String() string            { return proto.CompactTextString(m) }
func (*JobID) ProtoMessage()               {}
func (*JobID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *JobID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type JobLog struct {
	// The command line that was run
	Cmd []string `protobuf:"bytes,1,rep,name=cmd" json:"cmd,omitempty"`
	// When the command was executed
	StartTime string `protobuf:"bytes,2,opt,name=startTime" json:"startTime,omitempty"`
	// When the command completed
	EndTime string `protobuf:"bytes,3,opt,name=endTime" json:"endTime,omitempty"`
	// Sample of stdout (not guaranteed to be entire log)
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// Sample of stderr (not guaranteed to be entire log)
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// Exit code of the program
	ExitCode int32 `protobuf:"varint,6,opt,name=exitCode" json:"exitCode,omitempty"`
	// ip of worker host
	HostIP string `protobuf:"bytes,7,opt,name=hostIP" json:"hostIP,omitempty"`
	// ports bound from container to host
	Ports []*Ports `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
}

func (m *JobLog) Reset()                    { *m = JobLog{} }
func (m *JobLog) String() string            { return proto.CompactTextString(m) }
func (*JobLog) ProtoMessage()               {}
func (*JobLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *JobLog) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *JobLog) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *JobLog) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *JobLog) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *JobLog) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *JobLog) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *JobLog) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *JobLog) GetPorts() []*Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

// The description of the running instance of a task
type Job struct {
	JobID    string            `protobuf:"bytes,1,opt,name=jobID" json:"jobID,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Task     *Task             `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
	State    State             `protobuf:"varint,4,opt,name=state,enum=tes.State" json:"state,omitempty"`
	Logs     []*JobLog         `protobuf:"bytes,5,rep,name=logs" json:"logs,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Job) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *Job) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Job) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Job) GetState() State {
	if m != nil {
		return m.State
	}
	return State_Unknown
}

func (m *Job) GetLogs() []*JobLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

// Blank request message for service request
type ServiceInfoRequest struct {
}

func (m *ServiceInfoRequest) Reset()                    { *m = ServiceInfoRequest{} }
func (m *ServiceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfoRequest) ProtoMessage()               {}
func (*ServiceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Information about Task Execution Service
// May include information related (but not limited to)
// resource availability and storage system information
type ServiceInfo struct {
	// System specific key/value pairs
	// Example for a shared file system based storage system:
	// storageType=sharedFile, baseDir=/path/to/shared/directory
	StorageConfig map[string]string `protobuf:"bytes,1,rep,name=storageConfig" json:"storageConfig,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ServiceInfo) GetStorageConfig() map[string]string {
	if m != nil {
		return m.StorageConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskParameter)(nil), "tes.TaskParameter")
	proto.RegisterType((*Ports)(nil), "tes.Ports")
	proto.RegisterType((*DockerExecutor)(nil), "tes.DockerExecutor")
	proto.RegisterType((*Volume)(nil), "tes.Volume")
	proto.RegisterType((*Resources)(nil), "tes.Resources")
	proto.RegisterType((*Task)(nil), "tes.Task")
	proto.RegisterType((*JobListRequest)(nil), "tes.JobListRequest")
	proto.RegisterType((*TaskDesc)(nil), "tes.TaskDesc")
	proto.RegisterType((*JobDesc)(nil), "tes.JobDesc")
	proto.RegisterType((*JobListResponse)(nil), "tes.JobListResponse")
	proto.RegisterType((*JobID)(nil), "tes.JobID")
	proto.RegisterType((*JobLog)(nil), "tes.JobLog")
	proto.RegisterType((*Job)(nil), "tes.Job")
	proto.RegisterType((*ServiceInfoRequest)(nil), "tes.ServiceInfoRequest")
	proto.RegisterType((*ServiceInfo)(nil), "tes.ServiceInfo")
	proto.RegisterEnum("tes.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	// Get Service Info
	GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
	// Run a task
	RunTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*JobID, error)
	// List the TaskOps
	ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	// Get info about a running task
	GetJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Job, error)
	// Cancel a running task
	CancelJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobID, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RunTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := grpc.Invoke(ctx, "/tes.TaskService/RunTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CancelJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := grpc.Invoke(ctx, "/tes.TaskService/CancelJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	// Get Service Info
	GetServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfo, error)
	// Run a task
	RunTask(context.Context, *Task) (*JobID, error)
	// List the TaskOps
	ListJobs(context.Context, *JobListRequest) (*JobListResponse, error)
	// Get info about a running task
	GetJob(context.Context, *JobID) (*Job, error)
	// Cancel a running task
	CancelJob(context.Context, *JobID) (*JobID, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RunTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListJobs(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetJob(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CancelJob(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tes.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _TaskService_GetServiceInfo_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _TaskService_RunTask_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _TaskService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _TaskService_GetJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _TaskService_CancelJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tes.proto",
}

func init() { proto.RegisterFile("tes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0x1c, 0x45,
	0x13, 0x7e, 0x67, 0x77, 0x67, 0x3f, 0x6a, 0xb3, 0xf6, 0xaa, 0x5f, 0x93, 0x0c, 0x2b, 0x93, 0x58,
	0x03, 0x07, 0x13, 0x12, 0xaf, 0x62, 0x10, 0x84, 0x20, 0x21, 0x24, 0x3b, 0xb2, 0x6c, 0x25, 0x68,
	0x69, 0x27, 0x1c, 0x89, 0x7a, 0x67, 0x2a, 0x93, 0xc9, 0xee, 0x74, 0x0f, 0xdd, 0x3d, 0x8e, 0x6d,
	0xe0, 0x02, 0x17, 0xee, 0xdc, 0xb9, 0x20, 0xf1, 0x37, 0xb8, 0x70, 0xe6, 0x82, 0xf8, 0x07, 0xf9,
	0x21, 0xa8, 0x7b, 0x7a, 0xbf, 0xbc, 0xeb, 0x28, 0x39, 0x70, 0xeb, 0xaa, 0xae, 0xaa, 0xae, 0x7a,
	0x9e, 0xaa, 0x9a, 0x81, 0x96, 0x46, 0xb5, 0x93, 0x4b, 0xa1, 0x05, 0x59, 0x4f, 0xd8, 0x47, 0xc9,
	0xb3, 0x27, 0x9a, 0xa9, 0xd1, 0x13, 0x3c, 0xc5, 0xa8, 0xb7, 0x99, 0x08, 0x91, 0x8c, 0xb1, 0xcf,
	0xf2, 0xb4, 0xcf, 0x38, 0x17, 0x9a, 0xe9, 0x54, 0x70, 0x67, 0x1e, 0xfe, 0xe6, 0x41, 0xe7, 0x11,
	0x53, 0xa3, 0x01, 0x93, 0x2c, 0x43, 0x8d, 0x92, 0x10, 0xa8, 0x71, 0x96, 0x61, 0xe0, 0x6d, 0x79,
	0xdb, 0x2d, 0x6a, 0xcf, 0x64, 0x0b, 0xda, 0x31, 0xaa, 0x48, 0xa6, 0xb9, 0xf1, 0x0d, 0x2a, 0xf6,
	0x6a, 0x5e, 0x45, 0x7a, 0xd0, 0x1c, 0x8b, 0xc8, 0x86, 0x0e, 0xaa, 0xf6, 0x7a, 0x2a, 0x9b, 0x88,
	0x39, 0xd3, 0xcf, 0x82, 0x5a, 0x19, 0xd1, 0x9c, 0xc9, 0x06, 0xf8, 0xd1, 0x98, 0x29, 0x15, 0xf8,
	0x56, 0x59, 0x0a, 0xe4, 0x2a, 0xd4, 0x23, 0x89, 0x4c, 0x63, 0x50, 0xdf, 0xf2, 0xb6, 0x9b, 0xd4,
	0x49, 0xe1, 0xa7, 0xe0, 0x0f, 0x84, 0xd4, 0x8a, 0x6c, 0x42, 0x2b, 0x12, 0x5c, 0xb3, 0x94, 0xa3,
	0xb4, 0x19, 0xfa, 0x74, 0xa6, 0x30, 0x0f, 0x3d, 0x13, 0x4a, 0xdb, 0xfc, 0x7c, 0x6a, 0xcf, 0xe1,
	0x5f, 0x1e, 0xac, 0xed, 0x8b, 0x68, 0x84, 0xf2, 0xfe, 0x29, 0x46, 0x85, 0x16, 0xd2, 0x04, 0x49,
	0x33, 0x96, 0xe0, 0x97, 0xb3, 0x32, 0x67, 0x0a, 0xd2, 0x85, 0x6a, 0x94, 0xc5, 0x41, 0x65, 0xab,
	0xba, 0xdd, 0xa2, 0xe6, 0x48, 0x02, 0x68, 0xbc, 0x10, 0x72, 0x14, 0xa7, 0xd2, 0x95, 0x36, 0x11,
	0x4d, 0x15, 0x4a, 0xc7, 0x29, 0xb7, 0xe9, 0xb6, 0x68, 0x29, 0x98, 0x2a, 0x94, 0x8e, 0x45, 0xa1,
	0x5d, 0xc5, 0x4e, 0x72, 0x7a, 0x94, 0xd2, 0x15, 0xed, 0x24, 0x72, 0x0b, 0xfc, 0xdc, 0x54, 0x17,
	0x34, 0xb6, 0xaa, 0xdb, 0xed, 0xdd, 0xab, 0x3b, 0x17, 0x28, 0xdc, 0xb1, 0xb5, 0xd3, 0xd2, 0x28,
	0xfc, 0xd9, 0x83, 0xfa, 0xd7, 0x62, 0x5c, 0x64, 0xb8, 0x92, 0x2a, 0xf3, 0x48, 0x7a, 0x8e, 0x07,
	0x43, 0x8b, 0x82, 0x47, 0x9d, 0x64, 0xf5, 0xa2, 0x90, 0x11, 0xba, 0x1a, 0x9c, 0x44, 0xae, 0x03,
	0x64, 0xa2, 0xe0, 0x7a, 0x20, 0x52, 0xae, 0x5d, 0x1d, 0x73, 0x1a, 0x43, 0xac, 0x44, 0x16, 0x0b,
	0x3e, 0x3e, 0x0b, 0x1a, 0x96, 0x94, 0xa9, 0x1c, 0xfe, 0xe9, 0x41, 0x8b, 0x62, 0x19, 0x48, 0x91,
	0x6d, 0x58, 0xcf, 0x52, 0x9e, 0x66, 0x45, 0xb6, 0x97, 0x17, 0x7b, 0x42, 0xa2, 0xb2, 0x89, 0x75,
	0xe8, 0x45, 0xb5, 0x69, 0xa7, 0x5c, 0x22, 0x66, 0xb9, 0x4e, 0x87, 0x63, 0xb4, 0x89, 0x36, 0xe9,
	0xbc, 0x8a, 0x84, 0x70, 0xc5, 0x39, 0x51, 0x96, 0x1d, 0x0c, 0x6d, 0xce, 0x1e, 0x5d, 0xd0, 0x91,
	0x3b, 0xd0, 0x38, 0xb1, 0x38, 0xa8, 0xa0, 0x66, 0x81, 0xbb, 0xb6, 0x04, 0x5c, 0x89, 0x13, 0x9d,
	0xd8, 0x19, 0xbe, 0xce, 0x05, 0x47, 0xd3, 0x75, 0x86, 0xdd, 0x52, 0x08, 0xff, 0xa8, 0x40, 0xcd,
	0xcc, 0xc0, 0x4a, 0x3c, 0x37, 0xa1, 0x95, 0x4b, 0xf1, 0x1c, 0x23, 0x7d, 0xb8, 0xef, 0x1a, 0x7f,
	0xa6, 0xb8, 0x38, 0x18, 0xd5, 0xe5, 0xc1, 0xf8, 0x18, 0xea, 0x29, 0xcf, 0x0b, 0x3d, 0x49, 0xf2,
	0xfa, 0x52, 0x92, 0x0b, 0xe3, 0x47, 0x9d, 0x35, 0xb9, 0x0b, 0x0d, 0x51, 0x68, 0xeb, 0xe8, 0xbf,
	0x96, 0xe3, 0xc4, 0x9c, 0xdc, 0x85, 0x96, 0x9c, 0x90, 0x62, 0x09, 0x6d, 0xef, 0xf6, 0x96, 0x7c,
	0xa7, 0xb4, 0xd1, 0x99, 0x31, 0xf9, 0x04, 0xea, 0xb1, 0x1d, 0x95, 0xa0, 0x69, 0x9f, 0xbc, 0xb1,
	0xe4, 0xb6, 0x38, 0x49, 0xd4, 0x99, 0x9b, 0x9e, 0x5c, 0x3b, 0x12, 0xc3, 0x07, 0xa9, 0xd2, 0x14,
	0xbf, 0x2d, 0x50, 0xe9, 0x45, 0xdc, 0xbc, 0x8b, 0xb8, 0x5d, 0x07, 0x30, 0xe8, 0x0e, 0x24, 0x3e,
	0x4d, 0x4f, 0x1d, 0xac, 0x73, 0x1a, 0xd3, 0x75, 0x39, 0x4b, 0xf0, 0x38, 0x3d, 0x2f, 0xfb, 0xb5,
	0x43, 0xa7, 0xb2, 0x8d, 0xcc, 0x12, 0x7c, 0x24, 0x46, 0xc8, 0xdd, 0x84, 0xcd, 0x14, 0xe1, 0x37,
	0xd0, 0x34, 0xb8, 0xec, 0xa3, 0x8a, 0xfe, 0x0b, 0x3e, 0xc3, 0xef, 0xa1, 0x71, 0x24, 0x86, 0x36,
	0xfc, 0x06, 0xf8, 0xcf, 0xc5, 0x70, 0x5a, 0x5e, 0x29, 0x98, 0x69, 0x56, 0xda, 0xac, 0x30, 0x13,
	0x7c, 0x6d, 0xc5, 0x34, 0x1f, 0x9b, 0x5b, 0x5a, 0x1a, 0x91, 0xdb, 0x50, 0x33, 0x37, 0xf6, 0xa5,
	0xf6, 0xee, 0xdb, 0x2b, 0x39, 0x36, 0x8f, 0x51, 0x6b, 0x16, 0x22, 0xac, 0x4f, 0x71, 0x56, 0xb9,
	0xe0, 0x0a, 0xc9, 0x2d, 0xa8, 0x3d, 0x17, 0x43, 0x33, 0x6b, 0x86, 0xb2, 0x60, 0x29, 0x82, 0xcb,
	0x96, 0x5a, 0x2b, 0xf2, 0x1e, 0x74, 0x38, 0x9e, 0xea, 0xc1, 0x14, 0xc0, 0x12, 0x82, 0x45, 0x65,
	0xf8, 0x0e, 0xf8, 0x47, 0xb6, 0x98, 0x0d, 0xf0, 0x4f, 0xd8, 0xb8, 0x98, 0x40, 0x58, 0x0a, 0xe1,
	0x4b, 0x0f, 0xea, 0x26, 0x0d, 0x91, 0x4c, 0xb6, 0xa5, 0x37, 0xdb, 0x96, 0x9b, 0xd0, 0x52, 0x9a,
	0x49, 0xfd, 0x28, 0xcd, 0x70, 0x02, 0xf0, 0x54, 0x61, 0x76, 0x29, 0xf2, 0xd8, 0xde, 0xb9, 0x5d,
	0xea, 0xc4, 0x37, 0xde, 0x9a, 0x3d, 0x68, 0xe2, 0x69, 0xaa, 0xf7, 0x44, 0x5c, 0x7e, 0x2d, 0x7c,
	0x3a, 0x95, 0x8d, 0x8f, 0x59, 0xfe, 0x87, 0x03, 0xbb, 0xb2, 0x5a, 0xd4, 0x49, 0xb3, 0x4d, 0xdb,
	0x7c, 0x9d, 0x4d, 0xfb, 0x6b, 0x05, 0xaa, 0x47, 0x62, 0x78, 0x09, 0xcf, 0x9f, 0x43, 0x33, 0x43,
	0xcd, 0x62, 0xa6, 0x99, 0xfd, 0x58, 0xb4, 0x77, 0xc3, 0x55, 0xd8, 0xef, 0x3c, 0x74, 0x46, 0xf7,
	0xb9, 0x96, 0x67, 0x74, 0xea, 0x43, 0xde, 0x5f, 0x60, 0xfe, 0xad, 0x95, 0xcc, 0x97, 0xac, 0xcf,
	0x5a, 0xaa, 0xf6, 0x3a, 0x2d, 0xf5, 0x01, 0xd4, 0xc6, 0x22, 0x99, 0xac, 0x8d, 0x6b, 0xab, 0x92,
	0x7a, 0x20, 0x12, 0x6a, 0x8d, 0x7a, 0x9f, 0x41, 0x67, 0x21, 0x41, 0x43, 0xe8, 0x08, 0xcf, 0x5c,
	0xa9, 0xe6, 0x38, 0xeb, 0x81, 0xca, 0x5c, 0x0f, 0xdc, 0xab, 0xdc, 0xf5, 0xc2, 0x0d, 0x20, 0xc7,
	0x28, 0x4f, 0xd2, 0x08, 0x0f, 0xf9, 0x53, 0xe1, 0x26, 0x3f, 0xfc, 0xdd, 0x83, 0xf6, 0x9c, 0x9a,
	0x3c, 0x86, 0x8e, 0xd2, 0x42, 0xb2, 0x04, 0xf7, 0x04, 0x7f, 0x9a, 0x26, 0xae, 0x53, 0xfb, 0xcb,
	0x55, 0xcc, 0x9c, 0x76, 0x8e, 0xe7, 0x3d, 0x4a, 0xe8, 0x16, 0xa3, 0xf4, 0xbe, 0x00, 0xb2, 0x6c,
	0xf4, 0x26, 0xe9, 0xdf, 0xfc, 0xc9, 0x03, 0xdf, 0x22, 0x47, 0xda, 0xd0, 0x78, 0xcc, 0x47, 0x5c,
	0xbc, 0xe0, 0xdd, 0xff, 0x11, 0x80, 0xfa, 0x57, 0x05, 0x16, 0x18, 0x77, 0x3d, 0x73, 0x41, 0x0b,
	0xce, 0x53, 0x9e, 0x74, 0x2b, 0xe6, 0x62, 0xc0, 0x0a, 0x85, 0x71, 0xb7, 0x4a, 0xae, 0x40, 0x73,
	0x4f, 0x64, 0xf9, 0x18, 0x35, 0x76, 0x6b, 0xa4, 0x05, 0xfe, 0x7d, 0x29, 0x85, 0xec, 0xfa, 0x64,
	0x1d, 0xda, 0xc7, 0x67, 0x4a, 0x63, 0x56, 0x2a, 0xea, 0xd6, 0x92, 0xf1, 0x08, 0xc7, 0x18, 0x77,
	0x1b, 0xa4, 0x0b, 0x57, 0x0e, 0x79, 0xaa, 0x53, 0x36, 0x4e, 0xcf, 0x4d, 0xd4, 0xe6, 0xee, 0x3f,
	0x55, 0x68, 0x1b, 0xae, 0x5d, 0xf5, 0x24, 0x83, 0xb5, 0x03, 0xd4, 0xf3, 0x00, 0xbe, 0xfb, 0x2a,
	0xa4, 0x1c, 0xea, 0xbd, 0xcd, 0x57, 0x19, 0x85, 0xc1, 0x8f, 0x7f, 0xbf, 0xfc, 0xa5, 0x42, 0x48,
	0xb7, 0x7f, 0x72, 0xa7, 0x6f, 0x16, 0xc1, 0x6d, 0xe5, 0x9e, 0x7b, 0x68, 0x2b, 0xb4, 0x9f, 0xbf,
	0xd5, 0x3d, 0xd8, 0xbb, 0xba, 0xaa, 0x83, 0x0e, 0xf7, 0xc3, 0xff, 0xdb, 0x98, 0x9d, 0xb0, 0x39,
	0x89, 0x79, 0xcf, 0xbb, 0x49, 0x9e, 0x40, 0xd3, 0x6c, 0xa7, 0x23, 0xb3, 0x6b, 0x6e, 0xac, 0x6c,
	0xbd, 0xd9, 0x37, 0xa2, 0xb7, 0x75, 0xb9, 0x41, 0xb9, 0xdc, 0xc2, 0xae, 0x7d, 0x03, 0xc8, 0xf4,
	0x0d, 0x32, 0x80, 0xfa, 0x01, 0x9a, 0xf8, 0xe4, 0x92, 0xbc, 0x7a, 0x1b, 0xab, 0xf4, 0xcb, 0x08,
	0xf4, 0xbf, 0xb3, 0x9d, 0xf0, 0x03, 0x79, 0x0c, 0xad, 0x92, 0xa0, 0x57, 0x05, 0xbd, 0x0c, 0x04,
	0x17, 0xf6, 0xe6, 0x52, 0xd8, 0x61, 0xdd, 0xfe, 0x60, 0x7f, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa7, 0xad, 0xe9, 0x1a, 0x9c, 0x0b, 0x00, 0x00,
}
