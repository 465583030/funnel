// Code generated by protoc-gen-go.
// source: task_worker.proto
// DO NOT EDIT!

/*
Package ga4gh_task_ref is a generated protocol buffer package.

It is generated from these files:
	task_worker.proto

It has these top-level messages:
	Resources
	GCEWorkerInfo
	Worker
	JobWrapper
	UpdateJobLogsRequest
	UpdateJobLogsResponse
	QueuedTaskInfoRequest
	QueuedTaskInfo
	GetWorkersRequest
	GetWorkersResponse
	UpdateWorkerResponse
	GetWorkerRequest
*/
package ga4gh_task_ref

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ga4gh_task_exec "tes/ga4gh"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WorkerState int32

const (
	WorkerState_Uninitialized WorkerState = 0
	WorkerState_Alive         WorkerState = 1
	WorkerState_Dead          WorkerState = 2
	WorkerState_Gone          WorkerState = 3
	WorkerState_Initializing  WorkerState = 4
)

var WorkerState_name = map[int32]string{
	0: "Uninitialized",
	1: "Alive",
	2: "Dead",
	3: "Gone",
	4: "Initializing",
}
var WorkerState_value = map[string]int32{
	"Uninitialized": 0,
	"Alive":         1,
	"Dead":          2,
	"Gone":          3,
	"Initializing":  4,
}

func (x WorkerState) String() string {
	return proto.EnumName(WorkerState_name, int32(x))
}
func (WorkerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Resources struct {
	Cpus uint32 `protobuf:"varint,1,opt,name=cpus" json:"cpus,omitempty"`
	// In GB
	Ram float64 `protobuf:"fixed64,2,opt,name=ram" json:"ram,omitempty"`
	// In GB
	Disk float64 `protobuf:"fixed64,3,opt,name=disk" json:"disk,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Resources) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *Resources) GetRam() float64 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *Resources) GetDisk() float64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

type GCEWorkerInfo struct {
	Template string `protobuf:"bytes,1,opt,name=template" json:"template,omitempty"`
}

func (m *GCEWorkerInfo) Reset()                    { *m = GCEWorkerInfo{} }
func (m *GCEWorkerInfo) String() string            { return proto.CompactTextString(m) }
func (*GCEWorkerInfo) ProtoMessage()               {}
func (*GCEWorkerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GCEWorkerInfo) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

type Worker struct {
	Id          string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Jobs        map[string]*JobWrapper `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources   *Resources             `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	Available   *Resources             `protobuf:"bytes,6,opt,name=available" json:"available,omitempty"`
	LastPing    int64                  `protobuf:"varint,7,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
	State       WorkerState            `protobuf:"varint,8,opt,name=state,enum=ga4gh_task_ref.WorkerState" json:"state,omitempty"`
	Preemptible bool                   `protobuf:"varint,9,opt,name=preemptible" json:"preemptible,omitempty"`
	ActivePorts []int32                `protobuf:"varint,10,rep,packed,name=active_ports,json=activePorts" json:"active_ports,omitempty"`
	Zone        string                 `protobuf:"bytes,11,opt,name=zone" json:"zone,omitempty"`
	Gce         *GCEWorkerInfo         `protobuf:"bytes,12,opt,name=gce" json:"gce,omitempty"`
	// Hostname of the worker host.
	Hostname string `protobuf:"bytes,13,opt,name=hostname" json:"hostname,omitempty"`
	Version  int64  `protobuf:"varint,14,opt,name=version" json:"version,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Worker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Worker) GetJobs() map[string]*JobWrapper {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *Worker) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Worker) GetAvailable() *Resources {
	if m != nil {
		return m.Available
	}
	return nil
}

func (m *Worker) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

func (m *Worker) GetState() WorkerState {
	if m != nil {
		return m.State
	}
	return WorkerState_Uninitialized
}

func (m *Worker) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Worker) GetActivePorts() []int32 {
	if m != nil {
		return m.ActivePorts
	}
	return nil
}

func (m *Worker) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Worker) GetGce() *GCEWorkerInfo {
	if m != nil {
		return m.Gce
	}
	return nil
}

func (m *Worker) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Worker) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// TODO is there a nice way to avoid this wrapper? Maybe protobuf extensions?
//      or use metadata field of Job?
type JobWrapper struct {
	Job  *ga4gh_task_exec.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Auth string               `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *JobWrapper) Reset()                    { *m = JobWrapper{} }
func (m *JobWrapper) String() string            { return proto.CompactTextString(m) }
func (*JobWrapper) ProtoMessage()               {}
func (*JobWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobWrapper) GetJob() *ga4gh_task_exec.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobWrapper) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type UpdateJobLogsRequest struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Step     int64                   `protobuf:"varint,2,opt,name=step" json:"step,omitempty"`
	Log      *ga4gh_task_exec.JobLog `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	WorkerId string                  `protobuf:"bytes,5,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
}

func (m *UpdateJobLogsRequest) Reset()                    { *m = UpdateJobLogsRequest{} }
func (m *UpdateJobLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobLogsRequest) ProtoMessage()               {}
func (*UpdateJobLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateJobLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobLogsRequest) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *UpdateJobLogsRequest) GetLog() *ga4gh_task_exec.JobLog {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *UpdateJobLogsRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type UpdateJobLogsResponse struct {
}

func (m *UpdateJobLogsResponse) Reset()                    { *m = UpdateJobLogsResponse{} }
func (m *UpdateJobLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobLogsResponse) ProtoMessage()               {}
func (*UpdateJobLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type QueuedTaskInfoRequest struct {
	MaxTasks int32 `protobuf:"varint,1,opt,name=max_tasks,json=maxTasks" json:"max_tasks,omitempty"`
}

func (m *QueuedTaskInfoRequest) Reset()                    { *m = QueuedTaskInfoRequest{} }
func (m *QueuedTaskInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfoRequest) ProtoMessage()               {}
func (*QueuedTaskInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueuedTaskInfoRequest) GetMaxTasks() int32 {
	if m != nil {
		return m.MaxTasks
	}
	return 0
}

type QueuedTaskInfo struct {
	Inputs    []string                   `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Resources *ga4gh_task_exec.Resources `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *QueuedTaskInfo) Reset()                    { *m = QueuedTaskInfo{} }
func (m *QueuedTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfo) ProtoMessage()               {}
func (*QueuedTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueuedTaskInfo) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *QueuedTaskInfo) GetResources() *ga4gh_task_exec.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type GetWorkersRequest struct {
}

func (m *GetWorkersRequest) Reset()                    { *m = GetWorkersRequest{} }
func (m *GetWorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWorkersRequest) ProtoMessage()               {}
func (*GetWorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetWorkersResponse struct {
	Workers []*Worker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *GetWorkersResponse) Reset()                    { *m = GetWorkersResponse{} }
func (m *GetWorkersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetWorkersResponse) ProtoMessage()               {}
func (*GetWorkersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetWorkersResponse) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

type UpdateWorkerResponse struct {
}

func (m *UpdateWorkerResponse) Reset()                    { *m = UpdateWorkerResponse{} }
func (m *UpdateWorkerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateWorkerResponse) ProtoMessage()               {}
func (*UpdateWorkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetWorkerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetWorkerRequest) Reset()                    { *m = GetWorkerRequest{} }
func (m *GetWorkerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWorkerRequest) ProtoMessage()               {}
func (*GetWorkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetWorkerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Resources)(nil), "ga4gh_task_ref.Resources")
	proto.RegisterType((*GCEWorkerInfo)(nil), "ga4gh_task_ref.GCEWorkerInfo")
	proto.RegisterType((*Worker)(nil), "ga4gh_task_ref.Worker")
	proto.RegisterType((*JobWrapper)(nil), "ga4gh_task_ref.JobWrapper")
	proto.RegisterType((*UpdateJobLogsRequest)(nil), "ga4gh_task_ref.UpdateJobLogsRequest")
	proto.RegisterType((*UpdateJobLogsResponse)(nil), "ga4gh_task_ref.UpdateJobLogsResponse")
	proto.RegisterType((*QueuedTaskInfoRequest)(nil), "ga4gh_task_ref.QueuedTaskInfoRequest")
	proto.RegisterType((*QueuedTaskInfo)(nil), "ga4gh_task_ref.QueuedTaskInfo")
	proto.RegisterType((*GetWorkersRequest)(nil), "ga4gh_task_ref.GetWorkersRequest")
	proto.RegisterType((*GetWorkersResponse)(nil), "ga4gh_task_ref.GetWorkersResponse")
	proto.RegisterType((*UpdateWorkerResponse)(nil), "ga4gh_task_ref.UpdateWorkerResponse")
	proto.RegisterType((*GetWorkerRequest)(nil), "ga4gh_task_ref.GetWorkerRequest")
	proto.RegisterEnum("ga4gh_task_ref.WorkerState", WorkerState_name, WorkerState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error)
	UpdateJobLogs(ctx context.Context, in *UpdateJobLogsRequest, opts ...grpc.CallOption) (*UpdateJobLogsResponse, error)
	UpdateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*UpdateWorkerResponse, error)
	GetWorkers(ctx context.Context, in *GetWorkersRequest, opts ...grpc.CallOption) (*GetWorkersResponse, error)
	GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/ga4gh_task_ref.Scheduler/GetQueueInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerGetQueueInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_GetQueueInfoClient interface {
	Recv() (*QueuedTaskInfo, error)
	grpc.ClientStream
}

type schedulerGetQueueInfoClient struct {
	grpc.ClientStream
}

func (x *schedulerGetQueueInfoClient) Recv() (*QueuedTaskInfo, error) {
	m := new(QueuedTaskInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) UpdateJobLogs(ctx context.Context, in *UpdateJobLogsRequest, opts ...grpc.CallOption) (*UpdateJobLogsResponse, error) {
	out := new(UpdateJobLogsResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/UpdateJobLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*UpdateWorkerResponse, error) {
	out := new(UpdateWorkerResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/UpdateWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetWorkers(ctx context.Context, in *GetWorkersRequest, opts ...grpc.CallOption) (*GetWorkersResponse, error) {
	out := new(GetWorkersResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetWorker(ctx context.Context, in *GetWorkerRequest, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	GetQueueInfo(*QueuedTaskInfoRequest, Scheduler_GetQueueInfoServer) error
	UpdateJobLogs(context.Context, *UpdateJobLogsRequest) (*UpdateJobLogsResponse, error)
	UpdateWorker(context.Context, *Worker) (*UpdateWorkerResponse, error)
	GetWorkers(context.Context, *GetWorkersRequest) (*GetWorkersResponse, error)
	GetWorker(context.Context, *GetWorkerRequest) (*Worker, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetQueueInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueuedTaskInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).GetQueueInfo(m, &schedulerGetQueueInfoServer{stream})
}

type Scheduler_GetQueueInfoServer interface {
	Send(*QueuedTaskInfo) error
	grpc.ServerStream
}

type schedulerGetQueueInfoServer struct {
	grpc.ServerStream
}

func (x *schedulerGetQueueInfoServer) Send(m *QueuedTaskInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_UpdateJobLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateJobLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/UpdateJobLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateJobLogs(ctx, req.(*UpdateJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/UpdateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetWorkers(ctx, req.(*GetWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetWorker(ctx, req.(*GetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ga4gh_task_ref.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateJobLogs",
			Handler:    _Scheduler_UpdateJobLogs_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _Scheduler_UpdateWorker_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _Scheduler_GetWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _Scheduler_GetWorker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQueueInfo",
			Handler:       _Scheduler_GetQueueInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task_worker.proto",
}

func init() { proto.RegisterFile("task_worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x55, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0x8e, 0xe3, 0xa4, 0x8d, 0xc7, 0x49, 0x94, 0x2e, 0xbd, 0x9e, 0x49, 0x05, 0xf2, 0x59, 0x1c,
	0x32, 0x20, 0x95, 0x12, 0x2a, 0x71, 0xe2, 0x0d, 0x41, 0x09, 0xad, 0x4e, 0xe8, 0x6e, 0x4b, 0x75,
	0xe2, 0x85, 0x68, 0x13, 0xcf, 0xb9, 0x7b, 0x71, 0xbc, 0xc6, 0xbb, 0x0e, 0xbd, 0x7b, 0xe4, 0xbf,
	0xf0, 0x17, 0xf8, 0x7d, 0xa7, 0x5d, 0xc7, 0x69, 0xea, 0x4b, 0xae, 0x6f, 0xb3, 0xe3, 0x6f, 0x66,
	0xf6, 0x9b, 0xef, 0xdb, 0x04, 0x0e, 0x14, 0x93, 0xf3, 0xc9, 0x3f, 0x22, 0x9f, 0x63, 0x7e, 0x92,
	0xe5, 0x42, 0x09, 0xd2, 0x8f, 0xd9, 0x59, 0x7c, 0x33, 0x31, 0x1f, 0x72, 0x7c, 0x3d, 0x3c, 0x34,
	0x11, 0xde, 0xe2, 0xac, 0x50, 0x5c, 0xa4, 0x25, 0x2a, 0x38, 0x07, 0x87, 0xa2, 0x14, 0x45, 0x3e,
	0x43, 0x49, 0x08, 0xb4, 0x66, 0x59, 0x21, 0x3d, 0xcb, 0xb7, 0xc2, 0x1e, 0x35, 0x31, 0x19, 0x80,
	0x9d, 0xb3, 0x85, 0xd7, 0xf4, 0xad, 0xd0, 0xa2, 0x3a, 0xd4, 0xa8, 0x88, 0xcb, 0xb9, 0x67, 0x9b,
	0x94, 0x89, 0x83, 0x6f, 0xa0, 0x37, 0xfe, 0xf9, 0xfc, 0x95, 0x99, 0x7f, 0x91, 0xbe, 0x16, 0x64,
	0x08, 0x1d, 0x85, 0x8b, 0x2c, 0x61, 0x0a, 0x4d, 0x3b, 0x87, 0xae, 0xcf, 0xc1, 0x7f, 0x2d, 0xd8,
	0x2b, 0xa1, 0xa4, 0x0f, 0x4d, 0x1e, 0xad, 0x00, 0x4d, 0x1e, 0x91, 0x33, 0x68, 0xbd, 0x11, 0x53,
	0xe9, 0x35, 0x7d, 0x3b, 0x74, 0x47, 0xfe, 0xc9, 0x7d, 0x0e, 0x27, 0x65, 0xd5, 0xc9, 0xa5, 0x98,
	0xca, 0xf3, 0x54, 0xe5, 0x6f, 0xa9, 0x41, 0x93, 0x1f, 0xc0, 0xc9, 0x2b, 0x12, 0x5e, 0xdb, 0xb7,
	0x42, 0x77, 0xf4, 0x69, 0xbd, 0x74, 0xcd, 0x92, 0xde, 0x61, 0x75, 0x21, 0x5b, 0x32, 0x9e, 0xb0,
	0x69, 0x82, 0xde, 0xde, 0x83, 0x85, 0x6b, 0x2c, 0x39, 0x06, 0x27, 0x61, 0x52, 0x4d, 0x32, 0x9e,
	0xc6, 0xde, 0xbe, 0x6f, 0x85, 0x36, 0xed, 0xe8, 0xc4, 0x0b, 0x9e, 0xc6, 0xe4, 0x3b, 0x68, 0x4b,
	0xa5, 0x89, 0x77, 0x7c, 0x2b, 0xec, 0x8f, 0x8e, 0xb7, 0xb3, 0xb8, 0xd2, 0x10, 0x5a, 0x22, 0x89,
	0x0f, 0x6e, 0x96, 0x23, 0x2e, 0x32, 0xc5, 0xf5, 0x55, 0x1c, 0xdf, 0x0a, 0x3b, 0x74, 0x33, 0x45,
	0x9e, 0x40, 0x97, 0xcd, 0x14, 0x5f, 0xe2, 0x24, 0x13, 0xb9, 0x92, 0x1e, 0xf8, 0x76, 0xd8, 0xa6,
	0x6e, 0x99, 0x7b, 0xa1, 0x53, 0x5a, 0x98, 0x77, 0x22, 0x45, 0xcf, 0x35, 0xeb, 0x34, 0x31, 0xf9,
	0x16, 0xec, 0x78, 0x86, 0x5e, 0xd7, 0x70, 0xfb, 0xac, 0x7e, 0x93, 0x7b, 0x9a, 0x51, 0x8d, 0xd4,
	0xc2, 0xdd, 0x08, 0xa9, 0x52, 0xb6, 0x40, 0xaf, 0x57, 0x0a, 0x57, 0x9d, 0x89, 0x07, 0xfb, 0x4b,
	0xcc, 0x25, 0x17, 0xa9, 0xd7, 0x37, 0x9c, 0xab, 0xe3, 0xf0, 0x0a, 0x9c, 0xb5, 0x28, 0xda, 0x32,
	0x73, 0x7c, 0xbb, 0x52, 0x55, 0x87, 0xe4, 0x14, 0xda, 0x4b, 0x96, 0x14, 0x68, 0x6c, 0xe4, 0x8e,
	0x86, 0xf5, 0x7b, 0x5c, 0x8a, 0xe9, 0xab, 0x9c, 0x65, 0x19, 0xe6, 0xb4, 0x04, 0xfe, 0xd8, 0x7c,
	0x66, 0x05, 0xbf, 0x01, 0xdc, 0x7d, 0x20, 0x5f, 0x82, 0xfd, 0x46, 0x4c, 0x4d, 0x57, 0x77, 0x74,
	0xb8, 0xd9, 0x41, 0x7b, 0x5a, 0xb7, 0xa0, 0x1a, 0xa0, 0xb7, 0xc0, 0x0a, 0x75, 0x63, 0x46, 0x39,
	0xd4, 0xc4, 0xc1, 0xbf, 0x16, 0x1c, 0x5e, 0x67, 0x11, 0x53, 0x78, 0x29, 0xa6, 0xcf, 0x45, 0x2c,
	0x29, 0xfe, 0x5d, 0xa0, 0x54, 0x1f, 0xf8, 0x8f, 0x40, 0x4b, 0x2a, 0xcc, 0x4c, 0xb1, 0x4d, 0x4d,
	0x4c, 0xbe, 0x02, 0x3b, 0x11, 0xb1, 0xd7, 0x32, 0x83, 0x1f, 0x6f, 0x1b, 0xfc, 0x5c, 0xc4, 0x54,
	0x63, 0xb4, 0x2d, 0xca, 0x37, 0x38, 0xe1, 0x91, 0x31, 0xa2, 0x43, 0x3b, 0x65, 0xe2, 0x22, 0x0a,
	0x1e, 0xc3, 0xa3, 0xda, 0x1d, 0x64, 0x26, 0x52, 0x89, 0xc1, 0x19, 0x3c, 0x7a, 0x59, 0x60, 0x81,
	0xd1, 0x1f, 0x4c, 0xce, 0x8d, 0x12, 0xab, 0xdb, 0x1d, 0x83, 0xb3, 0x60, 0xb7, 0x66, 0x56, 0xf9,
	0x28, 0xdb, 0xb4, 0xb3, 0x60, 0xb7, 0x1a, 0x26, 0x83, 0x29, 0xf4, 0xef, 0x57, 0x91, 0x23, 0xd8,
	0xe3, 0x69, 0x56, 0x28, 0x8d, 0xb5, 0x43, 0x87, 0xae, 0x4e, 0xe4, 0xd9, 0xe6, 0xf3, 0xd8, 0xa2,
	0x80, 0xa1, 0xb1, 0xed, 0x7d, 0x04, 0x9f, 0xc0, 0xc1, 0x18, 0x55, 0x69, 0x91, 0x6a, 0x67, 0xc1,
	0xaf, 0x40, 0x36, 0x93, 0x25, 0x09, 0x72, 0x0a, 0xfb, 0x25, 0xd3, 0x72, 0xba, 0x3b, 0x3a, 0xda,
	0x6e, 0x7b, 0x5a, 0xc1, 0x82, 0xa3, 0x4a, 0x93, 0xd5, 0x87, 0x6a, 0x1d, 0x01, 0x0c, 0xd6, 0xfd,
	0x77, 0xe8, 0xf4, 0xf5, 0x4b, 0x70, 0x37, 0x5e, 0x11, 0x39, 0x80, 0xde, 0x75, 0xca, 0x53, 0xae,
	0x38, 0x4b, 0xf8, 0x3b, 0x8c, 0x06, 0x0d, 0xe2, 0x40, 0xfb, 0xa7, 0x84, 0x2f, 0x71, 0x60, 0x91,
	0x0e, 0xb4, 0x7e, 0x41, 0x16, 0x0d, 0x9a, 0x3a, 0x1a, 0x8b, 0x14, 0x07, 0x36, 0x19, 0x40, 0xf7,
	0xa2, 0xc2, 0xf3, 0x34, 0x1e, 0xb4, 0x46, 0xff, 0xdb, 0xe0, 0x5c, 0xcd, 0x6e, 0x30, 0x2a, 0x12,
	0xcc, 0xc9, 0x9f, 0xd0, 0x1d, 0xa3, 0x32, 0x0b, 0x36, 0xbb, 0x7d, 0x5a, 0x67, 0xb3, 0x55, 0xb1,
	0xe1, 0xe7, 0x1f, 0x87, 0x05, 0x8d, 0x53, 0x8b, 0xfc, 0x05, 0xbd, 0x7b, 0x3e, 0x20, 0x5f, 0xd4,
	0x8b, 0xb6, 0x59, 0x75, 0xf8, 0xf4, 0x01, 0xd4, 0x6a, 0x7b, 0x0d, 0xf2, 0x3b, 0x74, 0x37, 0xf7,
	0x4a, 0x76, 0x08, 0x31, 0xdc, 0x31, 0xb6, 0xa6, 0x46, 0x83, 0x5c, 0x03, 0xdc, 0xe9, 0x4d, 0x9e,
	0x7c, 0xf0, 0x1b, 0x52, 0x37, 0xc8, 0x30, 0xf8, 0x18, 0x64, 0xdd, 0x76, 0x0c, 0xce, 0x3a, 0x4f,
	0xfc, 0x9d, 0x25, 0x55, 0xd3, 0x1d, 0x2c, 0x82, 0xc6, 0x74, 0xcf, 0xfc, 0x93, 0x7d, 0xff, 0x3e,
	0x00, 0x00, 0xff, 0xff, 0xa3, 0x49, 0xb5, 0x68, 0x04, 0x07, 0x00, 0x00,
}
