// Code generated by protoc-gen-go.
// source: task_worker.proto
// DO NOT EDIT!

/*
Package ga4gh_task_ref is a generated protocol buffer package.

It is generated from these files:
	task_worker.proto

It has these top-level messages:
	LocalStorage
	S3Storage
	StorageConfig
	ServerConfig
	WorkerInfo
	JobRequest
	JobResponse
	UpdateStatusRequest
	QueuedTaskInfoRequest
	QueuedTaskInfo
*/
package ga4gh_task_ref

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ga4gh_task_exec "tes/ga4gh"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LocalStorage struct {
	AllowedDirs []string `protobuf:"bytes,1,rep,name=allowed_dirs,json=allowedDirs" json:"allowed_dirs,omitempty"`
}

func (m *LocalStorage) Reset()                    { *m = LocalStorage{} }
func (m *LocalStorage) String() string            { return proto.CompactTextString(m) }
func (*LocalStorage) ProtoMessage()               {}
func (*LocalStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LocalStorage) GetAllowedDirs() []string {
	if m != nil {
		return m.AllowedDirs
	}
	return nil
}

type S3Storage struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Secret   string `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
}

func (m *S3Storage) Reset()                    { *m = S3Storage{} }
func (m *S3Storage) String() string            { return proto.CompactTextString(m) }
func (*S3Storage) ProtoMessage()               {}
func (*S3Storage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *S3Storage) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *S3Storage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *S3Storage) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type StorageConfig struct {
	Local *LocalStorage `protobuf:"bytes,1,opt,name=local" json:"local,omitempty"`
	S3    *S3Storage    `protobuf:"bytes,2,opt,name=s3" json:"s3,omitempty"`
}

func (m *StorageConfig) Reset()                    { *m = StorageConfig{} }
func (m *StorageConfig) String() string            { return proto.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()               {}
func (*StorageConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StorageConfig) GetLocal() *LocalStorage {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *StorageConfig) GetS3() *S3Storage {
	if m != nil {
		return m.S3
	}
	return nil
}

type ServerConfig struct {
	Storage       []*StorageConfig `protobuf:"bytes,1,rep,name=storage" json:"storage,omitempty"`
	Secret        string           `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	ServerAddress string           `protobuf:"bytes,3,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServerConfig) GetStorage() []*StorageConfig {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ServerConfig) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ServerConfig) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

// *
// Worker Info
type WorkerInfo struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	LastPing int64  `protobuf:"varint,2,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *WorkerInfo) Reset()                    { *m = WorkerInfo{} }
func (m *WorkerInfo) String() string            { return proto.CompactTextString(m) }
func (*WorkerInfo) ProtoMessage()               {}
func (*WorkerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WorkerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WorkerInfo) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

func (m *WorkerInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type JobRequest struct {
	Worker    *WorkerInfo                `protobuf:"bytes,1,opt,name=worker" json:"worker,omitempty"`
	Resources *ga4gh_task_exec.Resources `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *JobRequest) Reset()                    { *m = JobRequest{} }
func (m *JobRequest) String() string            { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()               {}
func (*JobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JobRequest) GetWorker() *WorkerInfo {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *JobRequest) GetResources() *ga4gh_task_exec.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type JobResponse struct {
	Job     *ga4gh_task_exec.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Auth    string               `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	Storage []*StorageConfig     `protobuf:"bytes,3,rep,name=storage" json:"storage,omitempty"`
}

func (m *JobResponse) Reset()                    { *m = JobResponse{} }
func (m *JobResponse) String() string            { return proto.CompactTextString(m) }
func (*JobResponse) ProtoMessage()               {}
func (*JobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JobResponse) GetJob() *ga4gh_task_exec.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobResponse) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *JobResponse) GetStorage() []*StorageConfig {
	if m != nil {
		return m.Storage
	}
	return nil
}

type UpdateStatusRequest struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Step     int64                   `protobuf:"varint,2,opt,name=step" json:"step,omitempty"`
	State    ga4gh_task_exec.State   `protobuf:"varint,3,opt,name=state,enum=ga4gh_task_exec.State" json:"state,omitempty"`
	Log      *ga4gh_task_exec.JobLog `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	WorkerId string                  `protobuf:"bytes,5,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
	Metadata string                  `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *UpdateStatusRequest) Reset()                    { *m = UpdateStatusRequest{} }
func (m *UpdateStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusRequest) ProtoMessage()               {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateStatusRequest) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *UpdateStatusRequest) GetState() ga4gh_task_exec.State {
	if m != nil {
		return m.State
	}
	return ga4gh_task_exec.State_Unknown
}

func (m *UpdateStatusRequest) GetLog() *ga4gh_task_exec.JobLog {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *UpdateStatusRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *UpdateStatusRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type QueuedTaskInfoRequest struct {
	MaxTasks int32 `protobuf:"varint,1,opt,name=max_tasks,json=maxTasks" json:"max_tasks,omitempty"`
}

func (m *QueuedTaskInfoRequest) Reset()                    { *m = QueuedTaskInfoRequest{} }
func (m *QueuedTaskInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfoRequest) ProtoMessage()               {}
func (*QueuedTaskInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueuedTaskInfoRequest) GetMaxTasks() int32 {
	if m != nil {
		return m.MaxTasks
	}
	return 0
}

type QueuedTaskInfo struct {
	Inputs    []string                   `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Resources *ga4gh_task_exec.Resources `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *QueuedTaskInfo) Reset()                    { *m = QueuedTaskInfo{} }
func (m *QueuedTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfo) ProtoMessage()               {}
func (*QueuedTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueuedTaskInfo) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *QueuedTaskInfo) GetResources() *ga4gh_task_exec.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*LocalStorage)(nil), "ga4gh_task_ref.LocalStorage")
	proto.RegisterType((*S3Storage)(nil), "ga4gh_task_ref.S3Storage")
	proto.RegisterType((*StorageConfig)(nil), "ga4gh_task_ref.StorageConfig")
	proto.RegisterType((*ServerConfig)(nil), "ga4gh_task_ref.ServerConfig")
	proto.RegisterType((*WorkerInfo)(nil), "ga4gh_task_ref.WorkerInfo")
	proto.RegisterType((*JobRequest)(nil), "ga4gh_task_ref.JobRequest")
	proto.RegisterType((*JobResponse)(nil), "ga4gh_task_ref.JobResponse")
	proto.RegisterType((*UpdateStatusRequest)(nil), "ga4gh_task_ref.UpdateStatusRequest")
	proto.RegisterType((*QueuedTaskInfoRequest)(nil), "ga4gh_task_ref.QueuedTaskInfoRequest")
	proto.RegisterType((*QueuedTaskInfo)(nil), "ga4gh_task_ref.QueuedTaskInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	GetServerConfig(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*ServerConfig, error)
	GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error)
	GetJobToRun(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	UpdateJobStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*ga4gh_task_exec.JobID, error)
	WorkerPing(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*WorkerInfo, error)
	GetJobState(ctx context.Context, in *ga4gh_task_exec.JobID, opts ...grpc.CallOption) (*ga4gh_task_exec.JobDesc, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetServerConfig(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*ServerConfig, error) {
	out := new(ServerConfig)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetServerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/ga4gh_task_ref.Scheduler/GetQueueInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerGetQueueInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_GetQueueInfoClient interface {
	Recv() (*QueuedTaskInfo, error)
	grpc.ClientStream
}

type schedulerGetQueueInfoClient struct {
	grpc.ClientStream
}

func (x *schedulerGetQueueInfoClient) Recv() (*QueuedTaskInfo, error) {
	m := new(QueuedTaskInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) GetJobToRun(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetJobToRun", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateJobStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*ga4gh_task_exec.JobID, error) {
	out := new(ga4gh_task_exec.JobID)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/UpdateJobStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) WorkerPing(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*WorkerInfo, error) {
	out := new(WorkerInfo)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/WorkerPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetJobState(ctx context.Context, in *ga4gh_task_exec.JobID, opts ...grpc.CallOption) (*ga4gh_task_exec.JobDesc, error) {
	out := new(ga4gh_task_exec.JobDesc)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	GetServerConfig(context.Context, *WorkerInfo) (*ServerConfig, error)
	GetQueueInfo(*QueuedTaskInfoRequest, Scheduler_GetQueueInfoServer) error
	GetJobToRun(context.Context, *JobRequest) (*JobResponse, error)
	UpdateJobStatus(context.Context, *UpdateStatusRequest) (*ga4gh_task_exec.JobID, error)
	WorkerPing(context.Context, *WorkerInfo) (*WorkerInfo, error)
	GetJobState(context.Context, *ga4gh_task_exec.JobID) (*ga4gh_task_exec.JobDesc, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetServerConfig(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetQueueInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueuedTaskInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).GetQueueInfo(m, &schedulerGetQueueInfoServer{stream})
}

type Scheduler_GetQueueInfoServer interface {
	Send(*QueuedTaskInfo) error
	grpc.ServerStream
}

type schedulerGetQueueInfoServer struct {
	grpc.ServerStream
}

func (x *schedulerGetQueueInfoServer) Send(m *QueuedTaskInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_GetJobToRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetJobToRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetJobToRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetJobToRun(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateJobStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_WorkerPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).WorkerPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/WorkerPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).WorkerPing(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ga4gh_task_exec.JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetJobState(ctx, req.(*ga4gh_task_exec.JobID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ga4gh_task_ref.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerConfig",
			Handler:    _Scheduler_GetServerConfig_Handler,
		},
		{
			MethodName: "GetJobToRun",
			Handler:    _Scheduler_GetJobToRun_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _Scheduler_UpdateJobStatus_Handler,
		},
		{
			MethodName: "WorkerPing",
			Handler:    _Scheduler_WorkerPing_Handler,
		},
		{
			MethodName: "GetJobState",
			Handler:    _Scheduler_GetJobState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQueueInfo",
			Handler:       _Scheduler_GetQueueInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task_worker.proto",
}

func init() { proto.RegisterFile("task_worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x6f, 0x13, 0x3b,
	0x10, 0x4d, 0xb2, 0x4d, 0x6e, 0x33, 0x49, 0xd3, 0x7b, 0x7d, 0x7b, 0x7b, 0x97, 0x2d, 0xa0, 0x62,
	0x54, 0xd4, 0x4a, 0x28, 0x82, 0xa4, 0x12, 0xbc, 0x56, 0x54, 0x94, 0x56, 0x45, 0x6a, 0x37, 0xad,
	0x10, 0x4f, 0x91, 0x93, 0x9d, 0x6e, 0x96, 0x24, 0xeb, 0xc5, 0xf6, 0xd2, 0xc2, 0x23, 0x0f, 0xfc,
	0x39, 0xfe, 0x02, 0x3f, 0x06, 0xad, 0xed, 0x6d, 0xf3, 0x45, 0x24, 0x78, 0xb3, 0xc7, 0xc7, 0x33,
	0x73, 0xce, 0x1c, 0xef, 0xc2, 0x3f, 0x8a, 0xc9, 0x61, 0xf7, 0x9a, 0x8b, 0x21, 0x8a, 0x66, 0x22,
	0xb8, 0xe2, 0xa4, 0x11, 0xb2, 0xfd, 0x70, 0xd0, 0xd5, 0x07, 0x02, 0xaf, 0xbc, 0x0d, 0xbd, 0xc2,
	0x1b, 0xec, 0xa7, 0x2a, 0xe2, 0xb1, 0x41, 0xd1, 0xe7, 0x50, 0x3f, 0xe5, 0x7d, 0x36, 0xea, 0x28,
	0x2e, 0x58, 0x88, 0xe4, 0x11, 0xd4, 0xd9, 0x68, 0xc4, 0xaf, 0x31, 0xe8, 0x06, 0x91, 0x90, 0x6e,
	0x71, 0xdb, 0xd9, 0xad, 0xfa, 0x35, 0x1b, 0x3b, 0x8c, 0x84, 0xa4, 0xe7, 0x50, 0xed, 0xb4, 0x73,
	0xbc, 0x07, 0xab, 0x18, 0x07, 0x09, 0x8f, 0x62, 0xe5, 0x16, 0xb7, 0x8b, 0xbb, 0x55, 0xff, 0x76,
	0x4f, 0xfe, 0x06, 0x67, 0x88, 0x9f, 0xdd, 0x92, 0x0e, 0x67, 0x4b, 0xb2, 0x09, 0x15, 0x89, 0x7d,
	0x81, 0xca, 0x75, 0x74, 0xd0, 0xee, 0x68, 0x0c, 0x6b, 0x36, 0xe1, 0x2b, 0x1e, 0x5f, 0x45, 0x21,
	0x69, 0x41, 0x79, 0x94, 0xb5, 0xa5, 0x73, 0xd6, 0x5a, 0xf7, 0x9b, 0xd3, 0x64, 0x9a, 0x93, 0x3d,
	0xfb, 0x06, 0x4a, 0xf6, 0xa0, 0x24, 0xdb, 0xba, 0x5a, 0xad, 0x75, 0x6f, 0xf6, 0xc2, 0x6d, 0xc7,
	0x7e, 0x49, 0xb6, 0xe9, 0xb7, 0x22, 0xd4, 0x3b, 0x28, 0x3e, 0xa1, 0xb0, 0xf5, 0x5e, 0xc0, 0x5f,
	0xd2, 0x9c, 0x6b, 0xc6, 0xb5, 0xd6, 0x83, 0xb9, 0x04, 0x93, 0xfd, 0xf9, 0x39, 0x7a, 0x82, 0x51,
	0x69, 0x92, 0x11, 0xd9, 0x81, 0x86, 0xd4, 0x05, 0xba, 0x2c, 0x08, 0x04, 0x4a, 0x69, 0x19, 0xaf,
	0x99, 0xe8, 0x81, 0x09, 0xd2, 0x4b, 0x80, 0x77, 0x7a, 0x68, 0xc7, 0xf1, 0x15, 0x27, 0x0d, 0x28,
	0x45, 0x81, 0x95, 0xb1, 0x14, 0x05, 0x64, 0x0b, 0xaa, 0x23, 0x26, 0x55, 0x37, 0x89, 0xe2, 0x50,
	0xe7, 0x77, 0xfc, 0xd5, 0x2c, 0x70, 0x16, 0xc5, 0x61, 0xa6, 0xfc, 0x80, 0x4b, 0x15, 0xb3, 0x31,
	0xda, 0xdc, 0xb7, 0x7b, 0xfa, 0x05, 0xe0, 0x84, 0xf7, 0x7c, 0xfc, 0x98, 0xa2, 0x54, 0xa4, 0x05,
	0x15, 0xe3, 0x0c, 0xab, 0xa6, 0x37, 0xcb, 0xed, 0xae, 0x05, 0xdf, 0x22, 0xc9, 0x4b, 0xa8, 0x0a,
	0x94, 0x3c, 0x15, 0x7d, 0x94, 0x56, 0xd3, 0xa9, 0x6b, 0x99, 0x8f, 0x9a, 0x7e, 0x8e, 0xf0, 0xef,
	0xc0, 0xf4, 0x6b, 0x11, 0x6a, 0xba, 0xb8, 0x4c, 0x78, 0x2c, 0x91, 0x3c, 0x01, 0xe7, 0x03, 0xef,
	0xd9, 0xd2, 0x1b, 0x73, 0x39, 0x32, 0x68, 0x06, 0x20, 0x04, 0x56, 0x58, 0xaa, 0x06, 0x56, 0x47,
	0xbd, 0x9e, 0x1c, 0x8b, 0xf3, 0x3b, 0x63, 0xa1, 0xdf, 0x8b, 0xf0, 0xef, 0x65, 0x12, 0x30, 0x85,
	0x1d, 0xc5, 0x54, 0x2a, 0x73, 0x29, 0x66, 0x15, 0x26, 0xb0, 0x22, 0x15, 0x26, 0x56, 0x5c, 0xbd,
	0x26, 0x4f, 0xa1, 0x2c, 0x15, 0x53, 0x46, 0xd5, 0x46, 0x6b, 0x73, 0xae, 0xe5, 0x2c, 0x25, 0xfa,
	0x06, 0x44, 0xf6, 0xc0, 0x19, 0xf1, 0xd0, 0x5d, 0xd1, 0xf4, 0xfe, 0x5f, 0x44, 0xef, 0x94, 0x87,
	0x7e, 0x86, 0xc9, 0xc6, 0x69, 0xd4, 0xed, 0x46, 0x81, 0x5b, 0x36, 0x23, 0x33, 0x81, 0xe3, 0x20,
	0x1b, 0xe7, 0x18, 0x15, 0x0b, 0x98, 0x62, 0x6e, 0xc5, 0x9c, 0xe5, 0x7b, 0xba, 0x0f, 0xff, 0x9d,
	0xa7, 0x98, 0x62, 0x70, 0xc1, 0xe4, 0x50, 0x8f, 0xc9, 0xd2, 0xd9, 0x82, 0xea, 0x98, 0xdd, 0xe8,
	0x72, 0x52, 0xb3, 0x2a, 0xfb, 0xab, 0x63, 0x76, 0x93, 0xc1, 0x24, 0xed, 0x41, 0x63, 0xfa, 0x56,
	0x66, 0xd6, 0x28, 0x4e, 0x52, 0x95, 0x3f, 0x6b, 0xbb, 0xfb, 0xf3, 0x61, 0xb7, 0x7e, 0x38, 0x50,
	0xed, 0xf4, 0x07, 0x18, 0xa4, 0x23, 0x14, 0xe4, 0x2d, 0xac, 0x1f, 0xa1, 0x9a, 0x7a, 0x58, 0x4b,
	0xbc, 0xe6, 0xcd, 0xbd, 0xea, 0xc9, 0x9b, 0xb4, 0x40, 0xde, 0x43, 0xfd, 0x08, 0x95, 0xe6, 0xa0,
	0xdb, 0xdf, 0x99, 0xc5, 0x2f, 0x14, 0xc5, 0x7b, 0xb8, 0x1c, 0x46, 0x0b, 0xcf, 0x8a, 0xe4, 0x0d,
	0xd4, 0x8e, 0x50, 0x9d, 0xf0, 0xde, 0x05, 0xf7, 0xd3, 0x78, 0xbe, 0xcb, 0xbb, 0xd7, 0xe3, 0x6d,
	0x2d, 0x3c, 0x33, 0xe6, 0xa6, 0x05, 0x72, 0x06, 0xeb, 0xc6, 0x68, 0x27, 0xbc, 0x67, 0xbc, 0x46,
	0x1e, 0xcf, 0xde, 0x58, 0xe0, 0x44, 0x6f, 0x73, 0x91, 0x55, 0x8e, 0x0f, 0x69, 0x81, 0xbc, 0xce,
	0xbf, 0x09, 0xe6, 0x99, 0x2f, 0x11, 0x70, 0xc9, 0x19, 0x2d, 0x90, 0x83, 0x9c, 0xa3, 0xf6, 0x2b,
	0xf9, 0x45, 0x41, 0xcf, 0x5d, 0x14, 0x3f, 0x44, 0xd9, 0xa7, 0x85, 0x5e, 0x45, 0xff, 0x24, 0xda,
	0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x68, 0x99, 0xae, 0xee, 0x5f, 0x06, 0x00, 0x00,
}
