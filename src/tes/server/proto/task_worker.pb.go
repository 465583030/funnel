// Code generated by protoc-gen-go.
// source: task_worker.proto
// DO NOT EDIT!

/*
Package ga4gh_task_ref is a generated protocol buffer package.

It is generated from these files:
	task_worker.proto

It has these top-level messages:
	Resources
	Worker
	Assignment
	UpdateWorkerRequest
	UpdateWorkerResponse
	UpdateJobLogsRequest
	UpdateJobLogsResponse
	QueuedTaskInfoRequest
	QueuedTaskInfo
	GetWorkersRequest
	GetWorkersResponse
*/
package ga4gh_task_ref

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ga4gh_task_exec "tes/ga4gh"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WorkerState int32

const (
	WorkerState_Unknown WorkerState = 0
	WorkerState_Alive   WorkerState = 1
	WorkerState_Dead    WorkerState = 2
	WorkerState_Gone    WorkerState = 3
)

var WorkerState_name = map[int32]string{
	0: "Unknown",
	1: "Alive",
	2: "Dead",
	3: "Gone",
}
var WorkerState_value = map[string]int32{
	"Unknown": 0,
	"Alive":   1,
	"Dead":    2,
	"Gone":    3,
}

func (x WorkerState) String() string {
	return proto.EnumName(WorkerState_name, int32(x))
}
func (WorkerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Resources struct {
	// TODO doesn't say anything about size of CPU.
	//      does that matter these days?
	Cpus uint32  `protobuf:"varint,1,opt,name=cpus" json:"cpus,omitempty"`
	Ram  float64 `protobuf:"fixed64,2,opt,name=ram" json:"ram,omitempty"`
	Disk float64 `protobuf:"fixed64,3,opt,name=disk" json:"disk,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Resources) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *Resources) GetRam() float64 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *Resources) GetDisk() float64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

type Worker struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// TODO maybe map<> type in the protobuf schema is bad style.
	//      could easily convert to a map in the Go code.
	Active      map[string]bool `protobuf:"bytes,2,rep,name=active" json:"active,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Assigned    map[string]bool `protobuf:"bytes,4,rep,name=assigned" json:"assigned,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Resources   *Resources      `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	Available   *Resources      `protobuf:"bytes,6,opt,name=available" json:"available,omitempty"`
	LastPing    int64           `protobuf:"varint,7,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
	State       WorkerState     `protobuf:"varint,8,opt,name=state,enum=ga4gh_task_ref.WorkerState" json:"state,omitempty"`
	Preemptible bool            `protobuf:"varint,9,opt,name=preemptible" json:"preemptible,omitempty"`
	ActivePorts []int32         `protobuf:"varint,10,rep,packed,name=active_ports,json=activePorts" json:"active_ports,omitempty"`
	Zone        string          `protobuf:"bytes,11,opt,name=zone" json:"zone,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Worker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Worker) GetActive() map[string]bool {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Worker) GetAssigned() map[string]bool {
	if m != nil {
		return m.Assigned
	}
	return nil
}

func (m *Worker) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Worker) GetAvailable() *Resources {
	if m != nil {
		return m.Available
	}
	return nil
}

func (m *Worker) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

func (m *Worker) GetState() WorkerState {
	if m != nil {
		return m.State
	}
	return WorkerState_Unknown
}

func (m *Worker) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Worker) GetActivePorts() []int32 {
	if m != nil {
		return m.ActivePorts
	}
	return nil
}

func (m *Worker) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type Assignment struct {
	Job  *ga4gh_task_exec.Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Auth string               `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *Assignment) Reset()                    { *m = Assignment{} }
func (m *Assignment) String() string            { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()               {}
func (*Assignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Assignment) GetJob() *ga4gh_task_exec.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *Assignment) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type UpdateWorkerRequest struct {
	// ID of the worker
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Description of CPU, RAM, etc.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
	// Hostname of the worker host.
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	// States of all jobs in the worker: job ID -> State
	States map[string]ga4gh_task_exec.State `protobuf:"bytes,4,rep,name=states" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=ga4gh_task_exec.State"`
}

func (m *UpdateWorkerRequest) Reset()                    { *m = UpdateWorkerRequest{} }
func (m *UpdateWorkerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWorkerRequest) ProtoMessage()               {}
func (*UpdateWorkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateWorkerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateWorkerRequest) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *UpdateWorkerRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *UpdateWorkerRequest) GetStates() map[string]ga4gh_task_exec.State {
	if m != nil {
		return m.States
	}
	return nil
}

type UpdateWorkerResponse struct {
	// New jobs which have been assigned to this worker.
	Assigned []*Assignment `protobuf:"bytes,3,rep,name=assigned" json:"assigned,omitempty"`
	// IDs of jobs assigned to this worker that were canceled.
	Canceled []string `protobuf:"bytes,4,rep,name=canceled" json:"canceled,omitempty"`
}

func (m *UpdateWorkerResponse) Reset()                    { *m = UpdateWorkerResponse{} }
func (m *UpdateWorkerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateWorkerResponse) ProtoMessage()               {}
func (*UpdateWorkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateWorkerResponse) GetAssigned() []*Assignment {
	if m != nil {
		return m.Assigned
	}
	return nil
}

func (m *UpdateWorkerResponse) GetCanceled() []string {
	if m != nil {
		return m.Canceled
	}
	return nil
}

type UpdateJobLogsRequest struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Step     int64                   `protobuf:"varint,2,opt,name=step" json:"step,omitempty"`
	Log      *ga4gh_task_exec.JobLog `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	WorkerId string                  `protobuf:"bytes,5,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
}

func (m *UpdateJobLogsRequest) Reset()                    { *m = UpdateJobLogsRequest{} }
func (m *UpdateJobLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobLogsRequest) ProtoMessage()               {}
func (*UpdateJobLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateJobLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobLogsRequest) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *UpdateJobLogsRequest) GetLog() *ga4gh_task_exec.JobLog {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *UpdateJobLogsRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type UpdateJobLogsResponse struct {
}

func (m *UpdateJobLogsResponse) Reset()                    { *m = UpdateJobLogsResponse{} }
func (m *UpdateJobLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobLogsResponse) ProtoMessage()               {}
func (*UpdateJobLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type QueuedTaskInfoRequest struct {
	MaxTasks int32 `protobuf:"varint,1,opt,name=max_tasks,json=maxTasks" json:"max_tasks,omitempty"`
}

func (m *QueuedTaskInfoRequest) Reset()                    { *m = QueuedTaskInfoRequest{} }
func (m *QueuedTaskInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfoRequest) ProtoMessage()               {}
func (*QueuedTaskInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueuedTaskInfoRequest) GetMaxTasks() int32 {
	if m != nil {
		return m.MaxTasks
	}
	return 0
}

type QueuedTaskInfo struct {
	Inputs    []string                   `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
	Resources *ga4gh_task_exec.Resources `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *QueuedTaskInfo) Reset()                    { *m = QueuedTaskInfo{} }
func (m *QueuedTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*QueuedTaskInfo) ProtoMessage()               {}
func (*QueuedTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueuedTaskInfo) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *QueuedTaskInfo) GetResources() *ga4gh_task_exec.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type GetWorkersRequest struct {
}

func (m *GetWorkersRequest) Reset()                    { *m = GetWorkersRequest{} }
func (m *GetWorkersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWorkersRequest) ProtoMessage()               {}
func (*GetWorkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetWorkersResponse struct {
	Workers []*Worker `protobuf:"bytes,1,rep,name=workers" json:"workers,omitempty"`
}

func (m *GetWorkersResponse) Reset()                    { *m = GetWorkersResponse{} }
func (m *GetWorkersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetWorkersResponse) ProtoMessage()               {}
func (*GetWorkersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetWorkersResponse) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

func init() {
	proto.RegisterType((*Resources)(nil), "ga4gh_task_ref.Resources")
	proto.RegisterType((*Worker)(nil), "ga4gh_task_ref.Worker")
	proto.RegisterType((*Assignment)(nil), "ga4gh_task_ref.Assignment")
	proto.RegisterType((*UpdateWorkerRequest)(nil), "ga4gh_task_ref.UpdateWorkerRequest")
	proto.RegisterType((*UpdateWorkerResponse)(nil), "ga4gh_task_ref.UpdateWorkerResponse")
	proto.RegisterType((*UpdateJobLogsRequest)(nil), "ga4gh_task_ref.UpdateJobLogsRequest")
	proto.RegisterType((*UpdateJobLogsResponse)(nil), "ga4gh_task_ref.UpdateJobLogsResponse")
	proto.RegisterType((*QueuedTaskInfoRequest)(nil), "ga4gh_task_ref.QueuedTaskInfoRequest")
	proto.RegisterType((*QueuedTaskInfo)(nil), "ga4gh_task_ref.QueuedTaskInfo")
	proto.RegisterType((*GetWorkersRequest)(nil), "ga4gh_task_ref.GetWorkersRequest")
	proto.RegisterType((*GetWorkersResponse)(nil), "ga4gh_task_ref.GetWorkersResponse")
	proto.RegisterEnum("ga4gh_task_ref.WorkerState", WorkerState_name, WorkerState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error)
	UpdateJobLogs(ctx context.Context, in *UpdateJobLogsRequest, opts ...grpc.CallOption) (*UpdateJobLogsResponse, error)
	UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...grpc.CallOption) (*UpdateWorkerResponse, error)
	GetWorkers(ctx context.Context, in *GetWorkersRequest, opts ...grpc.CallOption) (*GetWorkersResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetQueueInfo(ctx context.Context, in *QueuedTaskInfoRequest, opts ...grpc.CallOption) (Scheduler_GetQueueInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/ga4gh_task_ref.Scheduler/GetQueueInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerGetQueueInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_GetQueueInfoClient interface {
	Recv() (*QueuedTaskInfo, error)
	grpc.ClientStream
}

type schedulerGetQueueInfoClient struct {
	grpc.ClientStream
}

func (x *schedulerGetQueueInfoClient) Recv() (*QueuedTaskInfo, error) {
	m := new(QueuedTaskInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) UpdateJobLogs(ctx context.Context, in *UpdateJobLogsRequest, opts ...grpc.CallOption) (*UpdateJobLogsResponse, error) {
	out := new(UpdateJobLogsResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/UpdateJobLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateWorker(ctx context.Context, in *UpdateWorkerRequest, opts ...grpc.CallOption) (*UpdateWorkerResponse, error) {
	out := new(UpdateWorkerResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/UpdateWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetWorkers(ctx context.Context, in *GetWorkersRequest, opts ...grpc.CallOption) (*GetWorkersResponse, error) {
	out := new(GetWorkersResponse)
	err := grpc.Invoke(ctx, "/ga4gh_task_ref.Scheduler/GetWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	GetQueueInfo(*QueuedTaskInfoRequest, Scheduler_GetQueueInfoServer) error
	UpdateJobLogs(context.Context, *UpdateJobLogsRequest) (*UpdateJobLogsResponse, error)
	UpdateWorker(context.Context, *UpdateWorkerRequest) (*UpdateWorkerResponse, error)
	GetWorkers(context.Context, *GetWorkersRequest) (*GetWorkersResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetQueueInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueuedTaskInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).GetQueueInfo(m, &schedulerGetQueueInfoServer{stream})
}

type Scheduler_GetQueueInfoServer interface {
	Send(*QueuedTaskInfo) error
	grpc.ServerStream
}

type schedulerGetQueueInfoServer struct {
	grpc.ServerStream
}

func (x *schedulerGetQueueInfoServer) Send(m *QueuedTaskInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_UpdateJobLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateJobLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/UpdateJobLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateJobLogs(ctx, req.(*UpdateJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/UpdateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateWorker(ctx, req.(*UpdateWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga4gh_task_ref.Scheduler/GetWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetWorkers(ctx, req.(*GetWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ga4gh_task_ref.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateJobLogs",
			Handler:    _Scheduler_UpdateJobLogs_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _Scheduler_UpdateWorker_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _Scheduler_GetWorkers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQueueInfo",
			Handler:       _Scheduler_GetQueueInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task_worker.proto",
}

func init() { proto.RegisterFile("task_worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 834 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0x51, 0x8f, 0xdb, 0x44,
	0x10, 0x3e, 0xdb, 0x49, 0xce, 0x1e, 0xdf, 0x45, 0xe9, 0xf6, 0xda, 0x1a, 0x9f, 0x84, 0x5c, 0x73,
	0x45, 0x01, 0xa1, 0x50, 0x42, 0x05, 0x6d, 0x79, 0xa1, 0x12, 0xe5, 0x68, 0xd5, 0x87, 0x76, 0xcb,
	0x09, 0x21, 0x24, 0xa2, 0x4d, 0x3c, 0xcd, 0xb9, 0x49, 0xbc, 0xc6, 0xbb, 0xbe, 0x5e, 0x79, 0xe4,
	0x47, 0xf0, 0x1f, 0xf8, 0x8b, 0x3c, 0xa1, 0xdd, 0x75, 0x12, 0x3b, 0x49, 0xaf, 0xf4, 0x6d, 0x3c,
	0xf9, 0xbe, 0xdd, 0x99, 0xef, 0x9b, 0xd9, 0xc0, 0x35, 0xc9, 0xc4, 0x6c, 0xf4, 0x86, 0x17, 0x33,
	0x2c, 0x06, 0x79, 0xc1, 0x25, 0x27, 0xdd, 0x29, 0xbb, 0x37, 0x3d, 0x1f, 0xe9, 0x1f, 0x0a, 0x7c,
	0x15, 0x1e, 0xe9, 0x08, 0x2f, 0x71, 0x52, 0xca, 0x94, 0x67, 0x06, 0x15, 0x3f, 0x06, 0x8f, 0xa2,
	0xe0, 0x65, 0x31, 0x41, 0x41, 0x08, 0xb4, 0x26, 0x79, 0x29, 0x02, 0x2b, 0xb2, 0xfa, 0x87, 0x54,
	0xc7, 0xa4, 0x07, 0x4e, 0xc1, 0x16, 0x81, 0x1d, 0x59, 0x7d, 0x8b, 0xaa, 0x50, 0xa1, 0x92, 0x54,
	0xcc, 0x02, 0x47, 0xa7, 0x74, 0x1c, 0xff, 0xd3, 0x82, 0xce, 0x2f, 0xfa, 0x76, 0xd2, 0x05, 0x3b,
	0x4d, 0xf4, 0x11, 0x1e, 0xb5, 0xd3, 0x84, 0x3c, 0x84, 0x0e, 0x9b, 0xc8, 0xf4, 0x02, 0x03, 0x3b,
	0x72, 0xfa, 0xfe, 0x30, 0x1e, 0x34, 0x0b, 0x1b, 0x18, 0xde, 0xe0, 0x91, 0x06, 0x3d, 0xce, 0x64,
	0xf1, 0x96, 0x56, 0x0c, 0xf2, 0x3d, 0xb8, 0x4c, 0x88, 0x74, 0x9a, 0x61, 0x12, 0xb4, 0x34, 0xfb,
	0xe4, 0x5d, 0xec, 0x0a, 0x66, 0xf8, 0x2b, 0x16, 0xf9, 0x16, 0xbc, 0x62, 0xd9, 0x5f, 0xd0, 0x8e,
	0xac, 0xbe, 0x3f, 0xfc, 0x68, 0xf3, 0x88, 0x95, 0x00, 0x74, 0x8d, 0x55, 0x44, 0x76, 0xc1, 0xd2,
	0x39, 0x1b, 0xcf, 0x31, 0xe8, 0xbc, 0x97, 0xb8, 0xc2, 0x92, 0x63, 0xf0, 0xe6, 0x4c, 0xc8, 0x51,
	0x9e, 0x66, 0xd3, 0x60, 0x3f, 0xb2, 0xfa, 0x0e, 0x75, 0x55, 0xe2, 0x79, 0x9a, 0x4d, 0xc9, 0x57,
	0xd0, 0x16, 0x92, 0x49, 0x0c, 0xdc, 0xc8, 0xea, 0x77, 0x87, 0xc7, 0xbb, 0xbb, 0x79, 0xa9, 0x20,
	0xd4, 0x20, 0x49, 0x04, 0x7e, 0x5e, 0x20, 0x2e, 0x72, 0x99, 0xaa, 0x52, 0xbc, 0xc8, 0xea, 0xbb,
	0xb4, 0x9e, 0x22, 0xb7, 0xe1, 0xc0, 0xe8, 0x35, 0xca, 0x79, 0x21, 0x45, 0x00, 0x91, 0xd3, 0x6f,
	0x53, 0xdf, 0xe4, 0x9e, 0xab, 0x94, 0xf2, 0xec, 0x4f, 0x9e, 0x61, 0xe0, 0x6b, 0x5b, 0x74, 0x1c,
	0x3e, 0x00, 0xbf, 0xa6, 0xb9, 0x32, 0x7a, 0x86, 0x6f, 0x2b, 0xe3, 0x54, 0x48, 0x8e, 0xa0, 0x7d,
	0xc1, 0xe6, 0x25, 0x6a, 0xf3, 0x5d, 0x6a, 0x3e, 0x1e, 0xda, 0xf7, 0xad, 0xf0, 0x3b, 0x38, 0x6c,
	0x08, 0xfe, 0x21, 0xe4, 0xf8, 0x27, 0x00, 0x43, 0x5e, 0x60, 0x26, 0xc9, 0xa7, 0xe0, 0xbc, 0xe6,
	0x63, 0xcd, 0xf4, 0x87, 0x47, 0x75, 0x3d, 0xd4, 0xa8, 0x0e, 0x9e, 0xf2, 0x31, 0x55, 0x00, 0xd5,
	0x01, 0x2b, 0xe5, 0xb9, 0x3e, 0xce, 0xa3, 0x3a, 0x8e, 0xff, 0xb6, 0xe1, 0xfa, 0x59, 0x9e, 0x30,
	0x89, 0x46, 0x37, 0x8a, 0x7f, 0x94, 0x28, 0xe4, 0xd6, 0x08, 0x36, 0x86, 0xc0, 0xfe, 0x80, 0x21,
	0x08, 0xc1, 0x3d, 0xe7, 0x42, 0x66, 0x6c, 0x81, 0x7a, 0xdc, 0x3d, 0xba, 0xfa, 0x26, 0xa7, 0xd0,
	0xd1, 0x06, 0x89, 0x6a, 0x32, 0xbf, 0xdc, 0x3c, 0x71, 0x47, 0x65, 0x03, 0xed, 0xac, 0xa8, 0x86,
	0xdc, 0xd0, 0xc3, 0x17, 0xe0, 0xd7, 0xd2, 0x3b, 0xa4, 0xfc, 0xa2, 0x2e, 0x65, 0x77, 0x78, 0x73,
	0x4b, 0xa4, 0x6a, 0x5e, 0xd6, 0x12, 0xbf, 0x86, 0xa3, 0xe6, 0xed, 0x22, 0xe7, 0x99, 0x40, 0xf2,
	0x4d, 0x6d, 0x9f, 0x1c, 0x5d, 0x75, 0xb8, 0x59, 0xf5, 0xda, 0x9a, 0xda, 0x16, 0x85, 0xe0, 0x4e,
	0x58, 0x36, 0xc1, 0x79, 0xb5, 0x87, 0x1e, 0x5d, 0x7d, 0xc7, 0x7f, 0x59, 0xcb, 0xcb, 0x9e, 0xf2,
	0xf1, 0x33, 0x3e, 0x15, 0xef, 0x72, 0x81, 0x40, 0x4b, 0x48, 0xcc, 0x75, 0x17, 0x0e, 0xd5, 0x31,
	0xf9, 0x0c, 0x9c, 0x39, 0x9f, 0x06, 0x2d, 0xed, 0xc9, 0xad, 0x5d, 0xee, 0x3f, 0xe3, 0x53, 0xaa,
	0x30, 0x6a, 0xaf, 0xcc, 0xfb, 0x36, 0x4a, 0x13, 0xbd, 0xc9, 0x1e, 0x75, 0x4d, 0xe2, 0x49, 0x12,
	0xdf, 0x82, 0x1b, 0x1b, 0x35, 0x98, 0x8e, 0xe3, 0x7b, 0x70, 0xe3, 0x45, 0x89, 0x25, 0x26, 0x3f,
	0x33, 0x31, 0x7b, 0x92, 0xbd, 0xe2, 0xcb, 0xea, 0x8e, 0xc1, 0x5b, 0xb0, 0x4b, 0x7d, 0x97, 0x79,
	0xf0, 0xda, 0xd4, 0x5d, 0xb0, 0x4b, 0x05, 0x13, 0xf1, 0x18, 0xba, 0x4d, 0x16, 0xb9, 0x09, 0x9d,
	0x34, 0xcb, 0x4b, 0xa9, 0xb0, 0xaa, 0xff, 0xea, 0x8b, 0xdc, 0xdf, 0x1e, 0xad, 0x70, 0xab, 0x8d,
	0x5d, 0xb3, 0x15, 0x5f, 0x87, 0x6b, 0xa7, 0x28, 0x8d, 0x41, 0x4b, 0xcd, 0xe2, 0x1f, 0x81, 0xd4,
	0x93, 0x95, 0x6d, 0x77, 0x61, 0xdf, 0x74, 0x6a, 0x6e, 0xf7, 0x9b, 0x23, 0xb0, 0x7e, 0x37, 0xe8,
	0x12, 0xf6, 0xf9, 0x03, 0xf0, 0x6b, 0x4f, 0x09, 0xf1, 0x61, 0xff, 0x2c, 0x9b, 0x65, 0xfc, 0x4d,
	0xd6, 0xdb, 0x23, 0x1e, 0xb4, 0x1f, 0xcd, 0xd3, 0x0b, 0xec, 0x59, 0xc4, 0x85, 0xd6, 0x0f, 0xc8,
	0x92, 0x9e, 0xad, 0xa2, 0x53, 0x9e, 0x61, 0xcf, 0x19, 0xfe, 0x6b, 0x83, 0xf7, 0x72, 0x72, 0x8e,
	0x49, 0x39, 0xc7, 0x82, 0xfc, 0x0a, 0x07, 0xa7, 0x28, 0xb5, 0x18, 0x5a, 0x87, 0x3b, 0x9b, 0x37,
	0xef, 0x54, 0x37, 0xfc, 0xf8, 0x6a, 0x58, 0xbc, 0x77, 0xd7, 0x22, 0xbf, 0xc3, 0x61, 0xc3, 0x33,
	0x72, 0xb2, 0x7b, 0x83, 0x9a, 0x63, 0x15, 0xde, 0x79, 0x0f, 0xaa, 0x32, 0x7e, 0x8f, 0xfc, 0x06,
	0x07, 0xf5, 0x25, 0x20, 0x9f, 0xfc, 0x8f, 0x05, 0x0d, 0x4f, 0xae, 0x06, 0xad, 0x0e, 0x3f, 0x03,
	0x58, 0x1b, 0x45, 0x6e, 0x6f, 0xb2, 0xb6, 0x9c, 0x0d, 0xe3, 0xab, 0x20, 0xcb, 0x63, 0xc7, 0x1d,
	0xfd, 0xaf, 0xfc, 0xf5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0xe7, 0x07, 0x22, 0xd0, 0x07,
	0x00, 0x00,
}
