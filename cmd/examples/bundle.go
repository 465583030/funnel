// Code generated by go-bindata.
// sources:
// examples/4-cpu-md5.json
// examples/4-cpu-sleep.json
// examples/google-storage.json
// examples/hello-world.json
// examples/md5-hard-link.json
// examples/md5.json
// examples/submit-date-loop.json
// examples/submit-echo-a-loop.json
// examples/submit-ports.json
// examples/task_message.json
// DO NOT EDIT!

package examples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examples4CpuMd5Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xfa\x30\x10\xc5\x77\x3e\xc5\xc9\x33\x52\x16\xb2\x64\x05\xf1\xd7\x7f\xa0\x62\x68\x27\x84\xaa\x60\x5f\x5b\x97\xd8\x17\xd9\x77\x95\x5a\xc4\x77\xaf\x9c\x92\x50\x9c\x42\x97\x66\xba\xf8\x3d\xbf\xfb\xf9\xec\xc3\x04\x00\x40\xf9\xda\xa1\xaa\x40\xdd\x63\x64\x98\xc1\x7c\xfd\x00\xce\x94\x6a\xfa\xa5\xb6\x81\x5e\x51\xf3\x7f\x93\x2c\x4b\xf1\x1e\x9b\x5e\x32\x18\x75\xb0\x2d\x5b\xf2\x49\x5c\xbd\xc3\x02\xa3\xee\x55\xeb\x5b\xe1\xa8\x2a\xd8\x74\xff\xe9\x3b\x0c\xd5\x45\x63\xeb\x9f\x6c\x83\xa7\x7d\x83\x9a\xa5\x2f\x6d\x83\xc0\x04\x3b\x84\xd5\xa2\x44\x93\xdb\x1b\xd2\x75\xef\x4d\x71\x55\x51\x14\xec\xda\x82\x31\xf2\xe3\x4f\xf9\xba\xa9\x63\xec\x93\x73\xb1\xad\xf9\x25\x69\x59\xc4\x60\x3a\x76\xd5\xf6\x74\x54\x12\xfe\xed\xac\x37\xf1\x48\xfe\x04\x91\x84\xaf\x11\x06\x8c\x24\x41\x63\x4a\x3b\x93\x29\x67\xbd\x75\xe2\xe6\xad\xcc\x29\x74\xe2\xec\xdc\x45\xbd\x51\x23\xae\x5b\xdd\x5c\xb9\xb9\xae\xad\xb1\x71\x9f\xc3\x45\xfb\x81\xff\x76\xaa\x82\x32\x13\x1c\x89\xe7\x35\x59\xcf\x3d\xfb\x37\xe4\x6d\x57\x1e\xfb\xe7\x45\x7a\x8f\xe1\xd6\x50\xad\xab\x9f\xf1\xee\xc4\x22\x3b\xf1\x2c\xa3\x11\xba\xf4\x70\x37\xca\x99\x32\x8a\x53\xd3\xd1\x95\x6e\x73\x72\x36\x69\x8e\xa3\xc1\x8e\x6d\x18\xc2\xa5\x2d\x2d\xe4\xf3\x9f\x1c\x27\x9f\x01\x00\x00\xff\xff\x9e\x83\xaa\x27\x67\x03\x00\x00")

func examples4CpuMd5JsonBytes() ([]byte, error) {
	return bindataRead(
		_examples4CpuMd5Json,
		"examples/4-cpu-md5.json",
	)
}

func examples4CpuMd5Json() (*asset, error) {
	bytes, err := examples4CpuMd5JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/4-cpu-md5.json", size: 871, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examples4CpuSleepJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4b\xc4\x40\x10\x86\xfb\xfc\x8a\x61\xea\xc0\x09\x9e\x4d\xda\x88\x62\xa1\x5c\x63\x15\x82\xdc\x6d\x06\x59\x2f\xfb\xc1\xee\x8c\xa0\x92\xff\x2e\xbb\xf9\x22\xd1\x54\xd9\xf7\x99\x81\x67\xde\x9f\x02\x00\x00\xed\xd9\x10\x56\x80\x47\xa8\x4f\xaf\x10\x7b\x22\x8f\xe5\x88\x7c\x70\x1f\xa4\xf8\xa9\x4b\xfc\x41\xac\xa5\x7e\x46\x1d\x45\x15\xb4\x67\xed\x6c\x82\xcf\x5f\x70\x4f\x51\xcd\x54\x5b\x2f\x1c\xb1\x82\x26\xbf\xdb\x29\x76\xc2\xff\xe6\x81\xa2\x93\xa0\x28\x91\xd1\x2a\xc7\x46\x5b\x6d\xc4\xd4\x5e\x6a\x17\x32\x3c\x96\x2b\xfd\x74\xbd\x98\x9c\x36\xeb\xce\xe6\x22\xa6\xc8\x6f\x9d\x8e\x57\x2c\xb7\x03\x51\x7f\xd3\xe3\x05\x2b\xb8\xdb\x01\xe3\xc4\xf2\xc9\x69\xcb\x69\xff\xc0\xc6\xe3\x32\x30\xb4\xf9\x77\x98\x0b\x70\xea\x4a\x61\x39\x25\x7d\x3b\x0d\x6d\xce\xef\xf4\x32\xb9\xc8\x45\x2c\xcb\x5e\x44\x99\x54\x6d\x83\x53\xeb\x80\xb7\x37\xd8\xee\x65\xb9\x73\xb2\xf8\x1c\xf2\x51\x29\xf8\x3b\x46\x21\x6c\xc7\x52\xb0\xfa\x8f\x95\x17\x43\xf1\x1b\x00\x00\xff\xff\x3d\x6a\x7b\x48\xf9\x01\x00\x00")

func examples4CpuSleepJsonBytes() ([]byte, error) {
	return bindataRead(
		_examples4CpuSleepJson,
		"examples/4-cpu-sleep.json",
	)
}

func examples4CpuSleepJson() (*asset, error) {
	bytes, err := examples4CpuSleepJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/4-cpu-sleep.json", size: 505, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesGoogleStorageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcd\x6a\xc3\x30\x0c\x80\xef\x7d\x0a\xa3\xf3\x82\xf7\x43\xd9\xc8\x75\x5d\xcb\x0e\x1b\x83\xee\x56\xca\x70\x1d\x35\xf1\x6a\x5b\xc1\x96\x5b\xb6\x92\x77\x1f\x49\x93\x1d\xba\xd0\xf9\x24\xd0\x27\xf4\x49\xf2\x71\x22\x84\x10\xe0\x95\x43\xc8\x05\xbc\x63\x64\xb1\x20\x2a\x2d\x8a\x25\x53\x50\x25\xc2\xd5\x09\xa9\x03\x7d\xa2\xe6\xe7\xa2\xe5\xe6\xc9\x7b\xb4\x43\xaa\xc0\xa8\x83\xa9\xd9\x90\x6f\x93\x4b\xe3\x6a\x8b\xe2\x49\x57\x24\x1e\xc9\x39\xe5\x8b\x81\x0c\x18\x29\x05\x8d\x11\x72\x71\x84\x3d\xd9\xe4\xba\x78\x75\xfc\x55\x60\x8c\xfc\x51\x98\xb8\xeb\x6b\x2e\x3c\x88\xe6\x1b\x17\x1b\xc8\xc5\xf4\x7f\xd6\x51\xf2\xfc\x46\xc6\x73\xdb\x45\xb2\xab\xa1\x59\x37\xc3\x04\xa4\x77\x18\x4e\x22\xc6\xa9\x12\x5f\x7b\x9b\xb4\x49\x9e\xd3\x88\x0a\x68\xd7\x6e\x62\x05\xa8\x2b\xba\xa0\x0a\x15\x5a\x7b\x11\x38\x50\xb0\x05\xac\x47\x5a\x44\x2e\x28\x75\xba\x7d\xf4\x07\x69\xfa\x32\x30\xbe\x4e\x7c\xb6\x49\xe3\xb7\xc6\xe2\x98\xfb\xd9\xc1\xe6\xc6\xa2\x60\x12\x1b\x14\x2f\xb3\x29\x16\x63\x25\x96\xb4\x1a\xf8\x32\xe6\x52\x46\xa7\xb3\xe0\x55\x86\x7b\x65\xa5\x3e\x58\x26\xb2\x59\x7b\xbc\x8c\x12\xd7\x89\xa5\x89\xb4\xa5\xe0\xe4\xfd\xcd\xf4\xfa\xe1\xf6\x4e\x8e\x2e\xd1\xaa\xd8\x5a\xc3\xcc\x04\xd4\x4c\xe1\x6b\x8c\xaa\x15\x57\xc3\xd1\x64\xf7\x3f\xba\xc1\x9a\xf5\xa4\x99\xfc\x04\x00\x00\xff\xff\x03\x0e\xce\x0c\xc1\x02\x00\x00")

func examplesGoogleStorageJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesGoogleStorageJson,
		"examples/google-storage.json",
	)
}

func examplesGoogleStorageJson() (*asset, error) {
	bytes, err := examplesGoogleStorageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/google-storage.json", size: 705, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesHelloWorldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x39\x8e\xc3\x30\x0c\x45\x7b\x9f\x82\x60\xed\x13\xb8\x1d\xcc\x60\xd2\xa4\x49\x69\xb8\x70\x28\x22\x56\x22\x89\x86\x16\xa4\x30\x7c\xf7\x80\x5e\x54\x44\xd5\x13\xde\xe7\x07\xb9\x34\x00\x00\x18\x46\xcf\xd8\x01\xfe\xb3\x73\x02\x6f\x89\xce\x60\xbb\xab\x39\xca\x93\x29\x5f\x8c\xfa\xbf\x12\x02\xbb\x53\x19\x4e\x14\xed\x9c\xad\x04\x95\x37\xeb\x67\xc7\xf0\x4b\x93\xc0\x8f\x78\x3f\x86\x5a\x12\x39\x49\x89\xc4\x09\x3b\x58\xd6\x73\x5c\xe8\xc5\x11\x3b\xe8\xb7\xbf\xbe\xa5\xd2\x96\xb0\x7e\x7c\xf0\xf5\xd8\xad\xdc\x4b\xc8\xe5\x68\xac\x11\xf2\xba\x58\x8f\x4c\x93\x60\x0b\x38\xe9\x05\x0a\xfb\x11\xc3\x57\x3c\x65\x23\x25\x6b\xdd\x41\x55\xaf\x1b\x0d\xcd\xda\x7c\x02\x00\x00\xff\xff\x36\xb6\xac\x5c\x14\x01\x00\x00")

func examplesHelloWorldJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesHelloWorldJson,
		"examples/hello-world.json",
	)
}

func examplesHelloWorldJson() (*asset, error) {
	bytes, err := examplesHelloWorldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/hello-world.json", size: 276, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesMd5HardLinkJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xb1\x6e\x02\x31\x0c\xdd\xf9\x0a\x2b\x33\xd2\x4d\x2c\x37\x23\xaa\x0e\x54\x1d\xba\x21\x54\x85\xc4\x2d\x29\x49\x7c\x4a\xec\x4a\x14\xf1\xef\x55\xae\x1c\x88\x5c\xa1\x4b\x6f\xf2\xe5\xbd\xbc\x3c\x3f\xfb\x30\x01\x00\x50\x51\x07\x54\x2d\xa8\x17\xcc\x0c\xcb\xf9\x0c\xb6\x3a\x59\xef\xe2\x4e\x4d\x7f\x08\x5d\xa2\x0f\x34\xfc\x68\x0b\x6b\x21\x31\xa2\x1f\x20\x8b\xd9\x24\xd7\xb1\xa3\x58\xc0\xe5\x1e\xe6\x98\xcd\x80\xba\xd8\x09\x67\xd5\xc2\xaa\xff\x2f\xdf\xe1\x5c\x5d\xbd\xed\xe2\x9b\xf3\x78\xba\x77\x46\x2b\xf5\x85\xf3\x08\x4c\xb0\xc1\x62\x13\x6d\x4d\xf7\x64\xf4\xc0\x2d\x72\x6d\xd3\x34\x1c\xba\x86\x31\xf3\xeb\x6f\xfa\xc6\xeb\x9c\x07\xe5\x1a\xec\x34\x6f\x0b\x56\x49\x9c\x49\xc7\xbe\x5a\x9f\x5a\x25\xe1\xbf\x7a\xbd\x6b\x8f\xe4\x5f\x2c\x92\xf0\x2d\x87\x09\x33\x49\x32\x58\xd4\x2e\xce\xd4\x27\x79\x09\xfd\xe1\xea\xc6\x6c\x7a\x61\xeb\xf2\xae\x7e\x3e\xbb\x2f\x7c\xd8\xa8\x16\x66\x15\x10\x48\x22\x3f\x93\x8b\x3c\xb8\xab\xaf\x26\xd4\x96\xa2\xdf\xab\x16\x38\x09\x5e\x2c\xaf\xfb\xf2\x38\xac\x17\x99\x1d\xa6\x7b\xa1\xba\xa0\xdf\xf1\xe9\xe4\x54\x36\x12\x59\x46\x11\x86\xb2\xb8\x2b\x15\xec\x2c\x4b\x50\xd3\xd1\x48\xd7\x75\x5f\x6c\x4b\x8e\xa3\x60\xc7\x34\x4c\xe9\x9a\x56\x0e\xea\xfc\x27\xc7\xc9\x77\x00\x00\x00\xff\xff\xf4\x64\x1d\x95\x6a\x03\x00\x00")

func examplesMd5HardLinkJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesMd5HardLinkJson,
		"examples/md5-hard-link.json",
	)
}

func examplesMd5HardLinkJson() (*asset, error) {
	bytes, err := examplesMd5HardLinkJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/md5-hard-link.json", size: 874, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesMd5Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x0a\xcb\x73\xa5\x4c\x5d\x32\x57\x45\x0c\x45\x0c\x6c\x55\x84\x12\xfb\x00\x53\xdb\x17\xd9\x77\x48\x50\xe5\xbf\x23\x87\x38\x50\x87\x96\x85\x4c\x97\x7b\xe7\xe7\xcf\xcf\x3e\xad\x84\x10\x42\xfa\xd6\x81\xac\x85\x7c\x80\x48\x62\xbf\xdd\xc8\xf5\x57\xbf\x0f\xf8\x0a\x8a\x6e\x75\x12\x77\xec\x3d\xd8\x2c\x69\x88\x2a\x98\x9e\x0c\xfa\x24\xee\xdf\xc5\x16\xa2\xca\xaa\xf1\x3d\x53\x94\xb5\x38\x8c\xff\xe9\x3b\xcd\xd5\xd9\x96\xc6\x3f\x19\x0b\xd3\xba\x59\x2d\xdc\x77\xc6\x82\x20\x14\x1d\x24\x3a\xd0\xe5\xb8\x45\xd5\xe6\xd9\x64\x57\x57\x55\x45\xae\xaf\x08\x22\x3d\xfe\xe6\xaf\x6c\x1b\x63\x76\x2e\xc5\xbe\xa5\x97\xa4\x15\x16\xf3\xd0\x30\x56\xcd\x74\x54\x64\xfa\xeb\xac\x57\xf1\x90\xff\x05\x11\x99\x2e\x11\x06\x88\xc8\x41\x41\x72\xfb\x26\x93\x6f\x68\xd9\x8d\xcd\xc3\x85\xbb\x19\x8d\xb5\x89\xc7\x72\xfb\x68\x3e\xe0\xa6\x93\xb5\xd8\x14\x82\x43\xf6\x74\x8f\xc6\x53\xa6\xfb\x01\xd5\x8c\xe5\x90\x1f\x10\xaa\x23\x84\x6b\xb1\x19\xd7\x3e\xc3\xdd\xc4\xc2\x1d\x7b\xe2\x45\x48\x2e\x3d\xcd\x83\x74\x7a\x13\xd9\xc9\xf5\xe2\xd2\x9a\x92\x9c\x74\x4a\x6a\x11\xdd\x72\x0c\x42\x38\x1f\x4b\x8d\x32\xe1\xd5\xb0\xfa\x0c\x00\x00\xff\xff\xf3\xd7\x6e\xf1\x43\x03\x00\x00")

func examplesMd5JsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesMd5Json,
		"examples/md5.json",
	)
}

func examplesMd5Json() (*asset, error) {
	bytes, err := examplesMd5JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/md5.json", size: 835, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitDateLoopJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfb\x15\x56\xce\x1b\x13\xd7\xed\x8a\x90\xb8\x20\xee\x53\x35\x75\xc9\x83\x16\xda\x38\x72\x9c\x21\x54\xf5\xbf\x23\x77\x6d\x0f\x83\x1c\x22\xe7\x7b\xcf\xb6\x5e\x86\x0d\x11\x91\x8b\x75\x0f\x77\x20\xf7\x54\x2b\xa8\x63\x4e\x6e\x7b\x13\x92\xf0\x27\xbc\xbe\x04\x53\x9f\x4b\x8c\xe8\x16\x29\x20\x7b\x69\x93\xb6\x1c\x4d\x7c\x93\x36\x2a\x69\x03\x0a\x36\x04\x57\xc8\x0f\x65\x78\x8e\x61\x4b\xef\x2c\x3b\x5c\x77\x2c\x0f\x4b\x77\x1b\x53\xd1\xec\x0e\x74\xaa\x66\xc2\x45\xef\x91\x20\x73\x11\x0f\x83\xc3\xb8\xec\x65\xff\x05\x31\xdb\xf4\xb6\x33\xac\xd5\x6d\x76\x5f\x7f\xe0\x75\x8e\x54\x2e\x25\x6a\x99\xd7\xae\x16\xdf\x5b\xa2\x93\xbb\xd4\xb9\x71\x5b\x72\x3b\x6f\xf7\x77\xd3\x76\x20\x95\x82\x23\x05\x9e\x82\x1c\x29\x77\x40\xa2\x47\x23\x11\xae\xba\x1b\x94\x35\x70\x51\x5b\xb4\xd7\x3e\xed\xad\xe5\x6c\x1f\x78\x36\xfa\xd7\x0b\x91\x7f\xbc\x46\x57\xeb\x38\x55\xd5\x66\xdc\xfc\x06\x00\x00\xff\xff\x9e\xbc\x4f\xe8\x9d\x01\x00\x00")

func examplesSubmitDateLoopJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitDateLoopJson,
		"examples/submit-date-loop.json",
	)
}

func examplesSubmitDateLoopJson() (*asset, error) {
	bytes, err := examplesSubmitDateLoopJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-date-loop.json", size: 413, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitEchoALoopJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\x56\xce\x2d\x83\xeb\x76\x06\x89\x0b\xe2\x3e\x55\x53\x96\x18\x1a\x68\xe3\xc8\x71\x86\x50\xd5\xff\x8e\xdc\xb5\x3d\x8c\xe5\x10\x39\xdf\x7b\xb1\xf5\x3c\x56\x00\x00\x26\xda\x01\xcd\x1e\xcc\xb3\xeb\x08\x2c\xf4\x44\xc9\xd4\x57\x29\x31\x7d\xa1\x93\x57\xaf\xfa\x4b\x89\x11\xfb\x55\xf2\x98\x1d\x87\x24\x81\xa2\x8a\xef\x1c\xa2\x80\x74\x08\xde\x0a\x02\x5e\x90\x7f\x21\xa3\xa3\xe8\x6b\xf8\x20\x6e\xf0\xd2\x10\x3f\xac\xbf\x43\x4c\x45\xb2\xd9\xc3\xb1\x5d\x08\x15\xb9\x45\x8c\x99\x0a\x3b\x54\x38\x4e\xeb\x5c\x72\xdf\xc8\x6a\x9b\xdf\x7a\xc6\xad\xba\xf6\x1e\xec\x27\xbe\x2d\xa1\xca\xb9\x44\x29\xcb\xd8\xcd\xe2\x06\x4d\x74\x34\x67\x9b\x3b\x53\x83\x69\x9c\xde\x3f\x5d\xe8\x11\x84\x0b\x1e\xc0\x13\xe0\xbc\x8f\x03\xe4\x1e\x31\xc1\xd3\xa3\xc2\x88\xa6\xbd\xe9\x95\xc5\x53\x11\x9d\xb5\x93\x21\xed\x34\xfe\x49\x77\x78\x52\xfa\xdf\x8b\xcc\x77\xbc\x4a\x37\xeb\x34\x57\x6d\x35\x55\x7f\x01\x00\x00\xff\xff\x2b\xca\x38\x89\xa2\x01\x00\x00")

func examplesSubmitEchoALoopJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitEchoALoopJson,
		"examples/submit-echo-a-loop.json",
	)
}

func examplesSubmitEchoALoopJson() (*asset, error) {
	bytes, err := examplesSubmitEchoALoopJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-echo-a-loop.json", size: 418, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesSubmitPortsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x6a\xc4\x30\x0c\x86\xf7\x3c\x85\xd0\x9c\x21\xdd\x82\xd7\xd2\x42\x97\x52\x68\xb7\x70\x43\xea\x88\x9e\xdb\x58\x32\x96\x3c\x85\xbc\x7b\xb1\xef\x92\xe1\x3c\xfd\xe6\xfb\xf4\x23\x6d\x1d\x00\x00\xf2\x1c\x09\x1d\xe0\x17\xa9\xc1\x87\x64\x53\xec\x6f\x24\x65\xf9\x25\x6f\x6f\x4b\xc5\xaf\x85\x99\xd6\x03\x2d\xa4\x3e\x87\x64\x41\xb8\xc2\xcf\x10\xd3\x4a\xf0\xe2\xaf\x02\xcf\x12\xe3\xcc\xcb\x61\x66\x52\x29\xd9\x93\xa2\x83\x6d\x3f\xc6\xc5\xff\x51\x46\x07\x53\xfb\xd7\xb7\x9d\xa9\x19\x21\xce\x3f\xf4\x7e\x5f\xad\x7c\x17\xb6\x72\x6f\x3c\x95\xd4\x76\x75\x30\x6d\x78\x15\x35\x74\x30\xf4\x80\x5e\xd8\xe6\xc0\xad\x7d\x1c\xc7\x71\xbf\x3c\x8c\xf9\x58\xef\x99\x50\x57\xa2\x84\x3d\xe0\xd3\x30\xe0\xa3\xa4\xb6\x48\xa9\x95\x47\x3a\xf1\xde\xd2\xa5\xdb\xbb\xff\x00\x00\x00\xff\xff\xc7\xc3\x75\x9b\x40\x01\x00\x00")

func examplesSubmitPortsJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesSubmitPortsJson,
		"examples/submit-ports.json",
	)
}

func examplesSubmitPortsJson() (*asset, error) {
	bytes, err := examplesSubmitPortsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/submit-ports.json", size: 320, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesTask_messageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xbd\x4e\xc4\x30\x10\x84\x6b\xfb\x29\x56\x5b\x5c\x15\xc4\x8f\x44\x93\xf6\x04\x88\x06\x21\x1d\xdd\xe9\x84\x12\x67\x21\xe6\x62\x6f\xe4\x1f\x0a\xa2\xbc\x3b\xf2\xfa\x82\x48\x93\xf5\xcc\xa7\xd9\xb1\x17\x0d\x00\x80\xbe\x73\x84\xd0\x02\xbe\x51\x4c\xf0\x60\x46\x6e\xe0\x30\x11\xcd\x8d\x1c\xb0\xa9\xd8\x1c\xf8\x8b\x4c\x7a\x1e\x84\x7d\xcc\xde\xd3\xb4\x79\x03\x45\x13\xec\x9c\x2c\x7b\x71\x0f\xd6\xcd\x13\xd5\x14\xd8\xb3\x73\x9d\x1f\x36\x36\x50\xe4\x1c\x0c\xc5\x42\x2e\x5a\xa1\xb3\xde\xba\xec\xf6\x73\xde\x73\xa0\x88\x2d\xdc\x55\x54\xf0\x6f\x9e\xb2\x13\xf5\xa8\x55\x51\x16\xad\x54\xed\xdc\x02\x26\x8a\xe9\x7d\xb0\xf1\x8c\x4d\x91\xa3\xfd\xa1\xa7\x1e\x5b\xb8\x97\xa3\xe3\xec\xd3\x2b\x5b\x9f\x0a\x7b\x9d\xdc\x8c\x7f\xc1\xe5\x5b\xb5\x3a\x89\xb0\x6e\xf7\x60\x73\xa6\x50\x8a\x1d\xb5\x5a\xea\x3e\xb4\xae\xfb\xa4\x97\xed\x91\x72\x9f\x7d\xca\x65\x9d\x98\xc6\x0d\x17\x5c\x61\xdf\xc5\xb1\xf6\xb8\x32\xf5\x4f\x66\x64\xf8\x60\x86\xdd\x0e\xa2\x3c\xc6\xed\x4d\x99\x45\xef\xbb\x80\x35\xe5\xb4\xa5\xc5\x34\x70\x4e\xb2\xe7\x32\xfe\x73\x28\x84\xcd\x29\xa3\x56\xab\x94\x3e\xe9\x55\xff\x06\x00\x00\xff\xff\xfe\x8d\x3c\x12\xca\x01\x00\x00")

func examplesTask_messageJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesTask_messageJson,
		"examples/task_message.json",
	)
}

func examplesTask_messageJson() (*asset, error) {
	bytes, err := examplesTask_messageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/task_message.json", size: 458, mode: os.FileMode(420), modTime: time.Unix(1490657100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/4-cpu-md5.json":          examples4CpuMd5Json,
	"examples/4-cpu-sleep.json":        examples4CpuSleepJson,
	"examples/google-storage.json":     examplesGoogleStorageJson,
	"examples/hello-world.json":        examplesHelloWorldJson,
	"examples/md5-hard-link.json":      examplesMd5HardLinkJson,
	"examples/md5.json":                examplesMd5Json,
	"examples/submit-date-loop.json":   examplesSubmitDateLoopJson,
	"examples/submit-echo-a-loop.json": examplesSubmitEchoALoopJson,
	"examples/submit-ports.json":       examplesSubmitPortsJson,
	"examples/task_message.json":       examplesTask_messageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"examples": {nil, map[string]*bintree{
		"4-cpu-md5.json":          {examples4CpuMd5Json, map[string]*bintree{}},
		"4-cpu-sleep.json":        {examples4CpuSleepJson, map[string]*bintree{}},
		"google-storage.json":     {examplesGoogleStorageJson, map[string]*bintree{}},
		"hello-world.json":        {examplesHelloWorldJson, map[string]*bintree{}},
		"md5-hard-link.json":      {examplesMd5HardLinkJson, map[string]*bintree{}},
		"md5.json":                {examplesMd5Json, map[string]*bintree{}},
		"submit-date-loop.json":   {examplesSubmitDateLoopJson, map[string]*bintree{}},
		"submit-echo-a-loop.json": {examplesSubmitEchoALoopJson, map[string]*bintree{}},
		"submit-ports.json":       {examplesSubmitPortsJson, map[string]*bintree{}},
		"task_message.json":       {examplesTask_messageJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
